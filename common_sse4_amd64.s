//+build !noasm !appengine
// AUTO-GENERATED BY C2GOASM -- DO NOT EDIT

TEXT ·_asm_sum_sse4_2(SB), $0-24

	MOVQ addr+0(FP), DI
	MOVQ len+8(FP), SI

	WORD $0x8548; BYTE $0xf6 // test    rsi, rsi
	JLE  LBB0_1
	LONG $0xf70c8d48         // lea    rcx, [rdi + 8*rsi]
	LONG $0x08478d48         // lea    rax, [rdi + 8]
	WORD $0x3948; BYTE $0xc1 // cmp    rcx, rax
	LONG $0xc1470f48         // cmova    rax, rcx
	WORD $0x8948; BYTE $0xfa // mov    rdx, rdi
	WORD $0xf748; BYTE $0xd2 // not    rdx
	WORD $0x0148; BYTE $0xc2 // add    rdx, rax
	LONG $0x03eac148         // shr    rdx, 3
	WORD $0xff48; BYTE $0xc2 // inc    rdx
	LONG $0x04fa8348         // cmp    rdx, 4
	JAE  LBB0_4
	WORD $0xc031             // xor    eax, eax
	JMP  LBB0_15

LBB0_1:
	WORD $0xc031 // xor    eax, eax
	JMP  LBB0_16

LBB0_4:
	QUAD $0xfffffffffffcb949; WORD $0x3fff // mov    r9, 4611686018427387900
	WORD $0x2149; BYTE $0xd1               // and    r9, rdx
	JE   LBB0_5
	LONG $0xfc418d4d                       // lea    r8, [r9 - 4]
	WORD $0x8944; BYTE $0xc6               // mov    esi, r8d
	WORD $0xeec1; BYTE $0x02               // shr    esi, 2
	WORD $0xc6ff                           // inc    esi
	LONG $0x03e68348                       // and    rsi, 3
	JE   LBB0_7
	WORD $0xf748; BYTE $0xde               // neg    rsi
	LONG $0xc0ef0f66                       // pxor    xmm0, xmm0
	WORD $0xc031                           // xor    eax, eax
	LONG $0xc9ef0f66                       // pxor    xmm1, xmm1

LBB0_9:
	LONG $0x146f0ff3; BYTE $0xc7   // movdqu    xmm2, oword [rdi + 8*rax]
	LONG $0x5c6f0ff3; WORD $0x10c7 // movdqu    xmm3, oword [rdi + 8*rax + 16]
	LONG $0xc2d40f66               // paddq    xmm0, xmm2
	LONG $0xcbd40f66               // paddq    xmm1, xmm3
	LONG $0x04c08348               // add    rax, 4
	WORD $0xff48; BYTE $0xc6       // inc    rsi
	JNE  LBB0_9
	JMP  LBB0_10

LBB0_5:
	WORD $0xc031 // xor    eax, eax
	JMP  LBB0_15

LBB0_7:
	WORD $0xc031     // xor    eax, eax
	LONG $0xc0ef0f66 // pxor    xmm0, xmm0
	LONG $0xc9ef0f66 // pxor    xmm1, xmm1

LBB0_10:
	LONG $0x0cf88349             // cmp    r8, 12
	JB   LBB0_13
	WORD $0x894c; BYTE $0xce     // mov    rsi, r9
	WORD $0x2948; BYTE $0xc6     // sub    rsi, rax
	LONG $0xc7448d48; BYTE $0x70 // lea    rax, [rdi + 8*rax + 112]

LBB0_12:
	LONG $0x506f0ff3; BYTE $0x90 // movdqu    xmm2, oword [rax - 112]
	LONG $0x586f0ff3; BYTE $0xa0 // movdqu    xmm3, oword [rax - 96]
	LONG $0x606f0ff3; BYTE $0xb0 // movdqu    xmm4, oword [rax - 80]
	LONG $0x686f0ff3; BYTE $0xc0 // movdqu    xmm5, oword [rax - 64]
	LONG $0xd0d40f66             // paddq    xmm2, xmm0
	LONG $0xd9d40f66             // paddq    xmm3, xmm1
	LONG $0x706f0ff3; BYTE $0xd0 // movdqu    xmm6, oword [rax - 48]
	LONG $0x786f0ff3; BYTE $0xe0 // movdqu    xmm7, oword [rax - 32]
	LONG $0xf4d40f66             // paddq    xmm6, xmm4
	LONG $0xf2d40f66             // paddq    xmm6, xmm2
	LONG $0xfdd40f66             // paddq    xmm7, xmm5
	LONG $0xfbd40f66             // paddq    xmm7, xmm3
	LONG $0x406f0ff3; BYTE $0xf0 // movdqu    xmm0, oword [rax - 16]
	LONG $0x086f0ff3             // movdqu    xmm1, oword [rax]
	LONG $0xc6d40f66             // paddq    xmm0, xmm6
	LONG $0xcfd40f66             // paddq    xmm1, xmm7
	LONG $0x80e88348             // sub    rax, -128
	LONG $0xf0c68348             // add    rsi, -16
	JNE  LBB0_12

LBB0_13:
	LONG $0xc1d40f66             // paddq    xmm0, xmm1
	LONG $0xc8700f66; BYTE $0x4e // pshufd    xmm1, xmm0, 78
	LONG $0xc8d40f66             // paddq    xmm1, xmm0
	LONG $0x7e0f4866; BYTE $0xc8 // movq    rax, xmm1
	WORD $0x394c; BYTE $0xca     // cmp    rdx, r9
	JE   LBB0_16
	LONG $0xcf3c8d4a             // lea    rdi, [rdi + 8*r9]

LBB0_15:
	WORD $0x0348; BYTE $0x07 // add    rax, qword [rdi]
	LONG $0x08c78348         // add    rdi, 8
	WORD $0x3948; BYTE $0xcf // cmp    rdi, rcx
	JB   LBB0_15

LBB0_16:
	MOVQ AX, ret+16(FP)
	RET

DATA LCDATA1<>+0x000(SB)/8, $0x8000000000000000
DATA LCDATA1<>+0x008(SB)/8, $0x8000000000000000
GLOBL LCDATA1<>(SB), 8, $16

TEXT ·_asm_max_sse4_2(SB), $0-24

	MOVQ addr+0(FP), DI
	MOVQ len+8(FP), SI
	LEAQ LCDATA1<>(SB), BP

	WORD $0x8548; BYTE $0xf6               // test    rsi, rsi
	JE   LBB1_1
	QUAD $0x000000000000b848; WORD $0x8000 // mov    rax, -9223372036854775808
	JLE  LBB1_14
	LONG $0xf70c8d48                       // lea    rcx, [rdi + 8*rsi]
	LONG $0x08778d48                       // lea    rsi, [rdi + 8]
	WORD $0x3948; BYTE $0xf1               // cmp    rcx, rsi
	LONG $0xf1470f48                       // cmova    rsi, rcx
	WORD $0x8948; BYTE $0xfa               // mov    rdx, rdi
	WORD $0xf748; BYTE $0xd2               // not    rdx
	WORD $0x0148; BYTE $0xf2               // add    rdx, rsi
	LONG $0x03eac148                       // shr    rdx, 3
	WORD $0xff48; BYTE $0xc2               // inc    rdx
	LONG $0x04fa8348                       // cmp    rdx, 4
	JB   LBB1_13
	QUAD $0xfffffffffffcb849; WORD $0x3fff // mov    r8, 4611686018427387900
	WORD $0x2149; BYTE $0xd0               // and    r8, rdx
	JE   LBB1_13
	LONG $0xfc708d49                       // lea    rsi, [r8 - 4]
	WORD $0x8948; BYTE $0xf0               // mov    rax, rsi
	LONG $0x02e8c148                       // shr    rax, 2
	LONG $0xe6ba0f48; BYTE $0x02           // bt    rsi, 2
	JB   LBB1_6
	LONG $0x176f0ff3                       // movdqu    xmm2, oword [rdi]
	LONG $0x5f6f0ff3; BYTE $0x10           // movdqu    xmm3, oword [rdi + 16]
	LONG $0x000004be; BYTE $0x00           // mov    esi, 4
	JMP  LBB1_8

LBB1_1:
	WORD $0xc031 // xor    eax, eax
	JMP  LBB1_14

LBB1_6:
	LONG $0x556f0f66; BYTE $0x00 // movdqa    xmm2, oword 0[rbp] /* [rip + .LCPI1_0] */
	WORD $0xf631                 // xor    esi, esi
	LONG $0xda6f0f66             // movdqa    xmm3, xmm2

LBB1_8:
	WORD $0x8548; BYTE $0xc0     // test    rax, rax
	JE   LBB1_11
	WORD $0x894c; BYTE $0xc0     // mov    rax, r8
	WORD $0x2948; BYTE $0xf0     // sub    rax, rsi
	LONG $0xf7748d48; BYTE $0x30 // lea    rsi, [rdi + 8*rsi + 48]

LBB1_10:
	LONG $0x666f0ff3; BYTE $0xd0 // movdqu    xmm4, oword [rsi - 48]
	LONG $0x6e6f0ff3; BYTE $0xe0 // movdqu    xmm5, oword [rsi - 32]
	LONG $0x766f0ff3; BYTE $0xf0 // movdqu    xmm6, oword [rsi - 16]
	LONG $0x3e6f0ff3             // movdqu    xmm7, oword [rsi]
	LONG $0xc46f0f66             // movdqa    xmm0, xmm4
	LONG $0x37380f66; BYTE $0xc2 // pcmpgtq    xmm0, xmm2
	LONG $0xcd6f0f66             // movdqa    xmm1, xmm5
	LONG $0x37380f66; BYTE $0xcb // pcmpgtq    xmm1, xmm3
	LONG $0x15380f66; BYTE $0xd4 // blendvpd    xmm2, xmm4
	LONG $0xc16f0f66             // movdqa    xmm0, xmm1
	LONG $0x15380f66; BYTE $0xdd // blendvpd    xmm3, xmm5
	LONG $0xc66f0f66             // movdqa    xmm0, xmm6
	LONG $0x37380f66; BYTE $0xc2 // pcmpgtq    xmm0, xmm2
	LONG $0xcf6f0f66             // movdqa    xmm1, xmm7
	LONG $0x37380f66; BYTE $0xcb // pcmpgtq    xmm1, xmm3
	LONG $0x15380f66; BYTE $0xd6 // blendvpd    xmm2, xmm6
	LONG $0xc16f0f66             // movdqa    xmm0, xmm1
	LONG $0x15380f66; BYTE $0xdf // blendvpd    xmm3, xmm7
	LONG $0x40c68348             // add    rsi, 64
	LONG $0xf8c08348             // add    rax, -8
	JNE  LBB1_10

LBB1_11:
	LONG $0xc26f0f66                           // movdqa    xmm0, xmm2
	LONG $0x37380f66; BYTE $0xc3               // pcmpgtq    xmm0, xmm3
	LONG $0x15380f66; BYTE $0xda               // blendvpd    xmm3, xmm2
	LONG $0xc3700f66; BYTE $0x4e               // pshufd    xmm0, xmm3, 78
	LONG $0xcb6f0f66                           // movdqa    xmm1, xmm3
	LONG $0x37380f66; BYTE $0xc8               // pcmpgtq    xmm1, xmm0
	LONG $0x143a0f66; WORD $0x00ce             // pextrb    esi, xmm1, 0
	LONG $0x7e0f4966; BYTE $0xd9               // movq    r9, xmm3
	LONG $0x3a0f4866; WORD $0xd816; BYTE $0x01 // pextrq    rax, xmm3, 1
	LONG $0x01c6f640                           // test    sil, 1
	LONG $0xc1450f49                           // cmovne    rax, r9
	WORD $0x394c; BYTE $0xc2                   // cmp    rdx, r8
	JE   LBB1_14
	LONG $0xc73c8d4a                           // lea    rdi, [rdi + 8*r8]

LBB1_13:
	WORD $0x8b48; BYTE $0x17 // mov    rdx, qword [rdi]
	WORD $0x3948; BYTE $0xc2 // cmp    rdx, rax
	LONG $0xc24d0f48         // cmovge    rax, rdx
	LONG $0x08c78348         // add    rdi, 8
	WORD $0x3948; BYTE $0xcf // cmp    rdi, rcx
	JB   LBB1_13

LBB1_14:
	MOVQ AX, ret+16(FP)
	RET

DATA LCDATA2<>+0x000(SB)/8, $0x7fffffffffffffff
DATA LCDATA2<>+0x008(SB)/8, $0x7fffffffffffffff
GLOBL LCDATA2<>(SB), 8, $16

TEXT ·_asm_min_sse4_2(SB), $0-24

	MOVQ addr+0(FP), DI
	MOVQ len+8(FP), SI
	LEAQ LCDATA2<>(SB), BP

	WORD $0x8548; BYTE $0xf6               // test    rsi, rsi
	JE   LBB2_1
	QUAD $0xffffffffffffb848; WORD $0x7fff // mov    rax, 9223372036854775807
	JLE  LBB2_14
	LONG $0xf70c8d48                       // lea    rcx, [rdi + 8*rsi]
	LONG $0x08778d48                       // lea    rsi, [rdi + 8]
	WORD $0x3948; BYTE $0xf1               // cmp    rcx, rsi
	LONG $0xf1470f48                       // cmova    rsi, rcx
	WORD $0x8948; BYTE $0xfa               // mov    rdx, rdi
	WORD $0xf748; BYTE $0xd2               // not    rdx
	WORD $0x0148; BYTE $0xf2               // add    rdx, rsi
	LONG $0x03eac148                       // shr    rdx, 3
	WORD $0xff48; BYTE $0xc2               // inc    rdx
	LONG $0x04fa8348                       // cmp    rdx, 4
	JB   LBB2_13
	QUAD $0xfffffffffffcb849; WORD $0x3fff // mov    r8, 4611686018427387900
	WORD $0x2149; BYTE $0xd0               // and    r8, rdx
	JE   LBB2_13
	LONG $0xfc708d49                       // lea    rsi, [r8 - 4]
	WORD $0x8948; BYTE $0xf0               // mov    rax, rsi
	LONG $0x02e8c148                       // shr    rax, 2
	LONG $0xe6ba0f48; BYTE $0x02           // bt    rsi, 2
	JB   LBB2_6
	LONG $0x176f0ff3                       // movdqu    xmm2, oword [rdi]
	LONG $0x5f6f0ff3; BYTE $0x10           // movdqu    xmm3, oword [rdi + 16]
	LONG $0x000004be; BYTE $0x00           // mov    esi, 4
	JMP  LBB2_8

LBB2_1:
	WORD $0xc031 // xor    eax, eax
	JMP  LBB2_14

LBB2_6:
	LONG $0x556f0f66; BYTE $0x00 // movdqa    xmm2, oword 0[rbp] /* [rip + .LCPI2_0] */
	WORD $0xf631                 // xor    esi, esi
	LONG $0xda6f0f66             // movdqa    xmm3, xmm2

LBB2_8:
	WORD $0x8548; BYTE $0xc0     // test    rax, rax
	JE   LBB2_11
	WORD $0x894c; BYTE $0xc0     // mov    rax, r8
	WORD $0x2948; BYTE $0xf0     // sub    rax, rsi
	LONG $0xf7748d48; BYTE $0x30 // lea    rsi, [rdi + 8*rsi + 48]

LBB2_10:
	LONG $0x666f0ff3; BYTE $0xd0 // movdqu    xmm4, oword [rsi - 48]
	LONG $0x6e6f0ff3; BYTE $0xe0 // movdqu    xmm5, oword [rsi - 32]
	LONG $0x766f0ff3; BYTE $0xf0 // movdqu    xmm6, oword [rsi - 16]
	LONG $0x3e6f0ff3             // movdqu    xmm7, oword [rsi]
	LONG $0xc26f0f66             // movdqa    xmm0, xmm2
	LONG $0x37380f66; BYTE $0xc4 // pcmpgtq    xmm0, xmm4
	LONG $0xcb6f0f66             // movdqa    xmm1, xmm3
	LONG $0x37380f66; BYTE $0xcd // pcmpgtq    xmm1, xmm5
	LONG $0x15380f66; BYTE $0xd4 // blendvpd    xmm2, xmm4
	LONG $0xc16f0f66             // movdqa    xmm0, xmm1
	LONG $0x15380f66; BYTE $0xdd // blendvpd    xmm3, xmm5
	LONG $0xc2280f66             // movapd    xmm0, xmm2
	LONG $0x37380f66; BYTE $0xc6 // pcmpgtq    xmm0, xmm6
	LONG $0xcb280f66             // movapd    xmm1, xmm3
	LONG $0x37380f66; BYTE $0xcf // pcmpgtq    xmm1, xmm7
	LONG $0x15380f66; BYTE $0xd6 // blendvpd    xmm2, xmm6
	LONG $0xc16f0f66             // movdqa    xmm0, xmm1
	LONG $0x15380f66; BYTE $0xdf // blendvpd    xmm3, xmm7
	LONG $0x40c68348             // add    rsi, 64
	LONG $0xf8c08348             // add    rax, -8
	JNE  LBB2_10

LBB2_11:
	LONG $0xc36f0f66                           // movdqa    xmm0, xmm3
	LONG $0x37380f66; BYTE $0xc2               // pcmpgtq    xmm0, xmm2
	LONG $0x15380f66; BYTE $0xda               // blendvpd    xmm3, xmm2
	LONG $0xc3700f66; BYTE $0x4e               // pshufd    xmm0, xmm3, 78
	LONG $0x37380f66; BYTE $0xc3               // pcmpgtq    xmm0, xmm3
	LONG $0x143a0f66; WORD $0x00c6             // pextrb    esi, xmm0, 0
	LONG $0x7e0f4966; BYTE $0xd9               // movq    r9, xmm3
	LONG $0x3a0f4866; WORD $0xd816; BYTE $0x01 // pextrq    rax, xmm3, 1
	LONG $0x01c6f640                           // test    sil, 1
	LONG $0xc1450f49                           // cmovne    rax, r9
	WORD $0x394c; BYTE $0xc2                   // cmp    rdx, r8
	JE   LBB2_14
	LONG $0xc73c8d4a                           // lea    rdi, [rdi + 8*r8]

LBB2_13:
	WORD $0x8b48; BYTE $0x17 // mov    rdx, qword [rdi]
	WORD $0x3948; BYTE $0xc2 // cmp    rdx, rax
	LONG $0xc24e0f48         // cmovle    rax, rdx
	LONG $0x08c78348         // add    rdi, 8
	WORD $0x3948; BYTE $0xcf // cmp    rdi, rcx
	JB   LBB2_13

LBB2_14:
	MOVQ AX, ret+16(FP)
	RET

TEXT ·_asm_multi_sse4_2(SB), $0-24

	MOVQ addr+0(FP), DI
	MOVQ addr1+8(FP), SI
	MOVQ len+16(FP), DX

	WORD $0x8548; BYTE $0xd2 // test    rdx, rdx
	JLE  LBB3_6
	LONG $0xd7048d48         // lea    rax, [rdi + 8*rdx]
	LONG $0x08578d48         // lea    rdx, [rdi + 8]
	WORD $0x3948; BYTE $0xd0 // cmp    rax, rdx
	LONG $0xd0470f48         // cmova    rdx, rax
	WORD $0x8949; BYTE $0xf8 // mov    r8, rdi
	WORD $0xf749; BYTE $0xd0 // not    r8
	WORD $0x0149; BYTE $0xd0 // add    r8, rdx
	WORD $0x8944; BYTE $0xc2 // mov    edx, r8d
	WORD $0xeac1; BYTE $0x03 // shr    edx, 3
	WORD $0xc2ff             // inc    edx
	LONG $0x03e28348         // and    rdx, 3
	JE   LBB3_4
	WORD $0xf748; BYTE $0xda // neg    rdx

LBB3_3:
	WORD $0x8b48; BYTE $0x0f // mov    rcx, qword [rdi]
	LONG $0x0eaf0f48         // imul    rcx, qword [rsi]
	LONG $0x08c68348         // add    rsi, 8
	WORD $0x8948; BYTE $0x0f // mov    qword [rdi], rcx
	LONG $0x087f8d48         // lea    rdi, [rdi + 8]
	WORD $0xff48; BYTE $0xc2 // inc    rdx
	JNE  LBB3_3

LBB3_4:
	LONG $0x18f88349 // cmp    r8, 24
	JB   LBB3_6

LBB3_5:
	WORD $0x8b48; BYTE $0x0f     // mov    rcx, qword [rdi]
	LONG $0x0eaf0f48             // imul    rcx, qword [rsi]
	WORD $0x8948; BYTE $0x0f     // mov    qword [rdi], rcx
	LONG $0x084f8b48             // mov    rcx, qword [rdi + 8]
	LONG $0x4eaf0f48; BYTE $0x08 // imul    rcx, qword [rsi + 8]
	LONG $0x084f8948             // mov    qword [rdi + 8], rcx
	LONG $0x104f8b48             // mov    rcx, qword [rdi + 16]
	LONG $0x4eaf0f48; BYTE $0x10 // imul    rcx, qword [rsi + 16]
	LONG $0x104f8948             // mov    qword [rdi + 16], rcx
	LONG $0x184f8b48             // mov    rcx, qword [rdi + 24]
	LONG $0x4eaf0f48; BYTE $0x18 // imul    rcx, qword [rsi + 24]
	LONG $0x184f8948             // mov    qword [rdi + 24], rcx
	LONG $0x20c78348             // add    rdi, 32
	LONG $0x20c68348             // add    rsi, 32
	WORD $0x3948; BYTE $0xc7     // cmp    rdi, rax
	JB   LBB3_5

LBB3_6:
	RET

TEXT ·_asm_and_sse4_2(SB), $0-24

	MOVQ addr+0(FP), DI
	MOVQ addr1+8(FP), SI
	MOVQ len+16(FP), DX

	WORD $0x8548; BYTE $0xd2               // test    rdx, rdx
	JLE  LBB4_18
	LONG $0xd7148d4c                       // lea    r10, [rdi + 8*rdx]
	LONG $0x08478d48                       // lea    rax, [rdi + 8]
	WORD $0x3949; BYTE $0xc2               // cmp    r10, rax
	WORD $0x8949; BYTE $0xc1               // mov    r9, rax
	LONG $0xca470f4d                       // cmova    r9, r10
	WORD $0x8948; BYTE $0xf9               // mov    rcx, rdi
	WORD $0xf748; BYTE $0xd1               // not    rcx
	WORD $0x0149; BYTE $0xc9               // add    r9, rcx
	LONG $0x03e9c149                       // shr    r9, 3
	WORD $0xff49; BYTE $0xc1               // inc    r9
	LONG $0x04f98349                       // cmp    r9, 4
	JB   LBB4_13
	QUAD $0xfffffffffffcb849; WORD $0x3fff // mov    r8, 4611686018427387900
	WORD $0x214d; BYTE $0xc8               // and    r8, r9
	JE   LBB4_13
	WORD $0x3949; BYTE $0xc2               // cmp    r10, rax
	LONG $0xc2470f49                       // cmova    rax, r10
	WORD $0x0148; BYTE $0xc8               // add    rax, rcx
	LONG $0xf8e08348                       // and    rax, -8
	LONG $0x064c8d48; BYTE $0x08           // lea    rcx, [rsi + rax + 8]
	WORD $0x3948; BYTE $0xf9               // cmp    rcx, rdi
	JBE  LBB4_5
	LONG $0x07448d48; BYTE $0x08           // lea    rax, [rdi + rax + 8]
	WORD $0x3948; BYTE $0xf0               // cmp    rax, rsi
	JA   LBB4_13

LBB4_5:
	LONG $0xfc488d49               // lea    rcx, [r8 - 4]
	WORD $0x8948; BYTE $0xc8       // mov    rax, rcx
	LONG $0x02e8c148               // shr    rax, 2
	LONG $0xe1ba0f48; BYTE $0x02   // bt    rcx, 2
	JB   LBB4_6
	WORD $0x100f; BYTE $0x06       // movups    xmm0, oword [rsi]
	LONG $0x104e100f               // movups    xmm1, oword [rsi + 16]
	WORD $0x100f; BYTE $0x17       // movups    xmm2, oword [rdi]
	LONG $0x105f100f               // movups    xmm3, oword [rdi + 16]
	WORD $0x540f; BYTE $0xd0       // andps    xmm2, xmm0
	WORD $0x540f; BYTE $0xd9       // andps    xmm3, xmm1
	WORD $0x110f; BYTE $0x17       // movups    oword [rdi], xmm2
	LONG $0x105f110f               // movups    oword [rdi + 16], xmm3
	LONG $0x0004bb41; WORD $0x0000 // mov    r11d, 4
	JMP  LBB4_8

LBB4_6:
	WORD $0x3145; BYTE $0xdb // xor    r11d, r11d

LBB4_8:
	WORD $0x8548; BYTE $0xc0     // test    rax, rax
	JE   LBB4_11
	WORD $0x894c; BYTE $0xc2     // mov    rdx, r8
	WORD $0x294c; BYTE $0xda     // sub    rdx, r11
	LONG $0xde4c8d4a; BYTE $0x30 // lea    rcx, [rsi + 8*r11 + 48]
	LONG $0xdf448d4a; BYTE $0x30 // lea    rax, [rdi + 8*r11 + 48]

LBB4_10:
	LONG $0xd041100f         // movups    xmm0, oword [rcx - 48]
	LONG $0xe049100f         // movups    xmm1, oword [rcx - 32]
	LONG $0xd050100f         // movups    xmm2, oword [rax - 48]
	LONG $0xe058100f         // movups    xmm3, oword [rax - 32]
	WORD $0x540f; BYTE $0xd0 // andps    xmm2, xmm0
	WORD $0x540f; BYTE $0xd9 // andps    xmm3, xmm1
	LONG $0xd050110f         // movups    oword [rax - 48], xmm2
	LONG $0xe058110f         // movups    oword [rax - 32], xmm3
	LONG $0xf041100f         // movups    xmm0, oword [rcx - 16]
	WORD $0x100f; BYTE $0x09 // movups    xmm1, oword [rcx]
	LONG $0xf050100f         // movups    xmm2, oword [rax - 16]
	WORD $0x100f; BYTE $0x18 // movups    xmm3, oword [rax]
	WORD $0x540f; BYTE $0xd0 // andps    xmm2, xmm0
	WORD $0x540f; BYTE $0xd9 // andps    xmm3, xmm1
	LONG $0xf050110f         // movups    oword [rax - 16], xmm2
	WORD $0x110f; BYTE $0x18 // movups    oword [rax], xmm3
	LONG $0x40c18348         // add    rcx, 64
	LONG $0x40c08348         // add    rax, 64
	LONG $0xf8c28348         // add    rdx, -8
	JNE  LBB4_10

LBB4_11:
	WORD $0x394d; BYTE $0xc1 // cmp    r9, r8
	JE   LBB4_18
	LONG $0xc73c8d4a         // lea    rdi, [rdi + 8*r8]
	LONG $0xc6348d4a         // lea    rsi, [rsi + 8*r8]

LBB4_13:
	LONG $0x08478d48         // lea    rax, [rdi + 8]
	WORD $0x3949; BYTE $0xc2 // cmp    r10, rax
	LONG $0xc2470f49         // cmova    rax, r10
	WORD $0x8948; BYTE $0xf9 // mov    rcx, rdi
	WORD $0xf748; BYTE $0xd1 // not    rcx
	WORD $0x0148; BYTE $0xc1 // add    rcx, rax
	WORD $0xc889             // mov    eax, ecx
	WORD $0xe8c1; BYTE $0x03 // shr    eax, 3
	WORD $0xc0ff             // inc    eax
	LONG $0x03e08348         // and    rax, 3
	JE   LBB4_16
	WORD $0xf748; BYTE $0xd8 // neg    rax

LBB4_15:
	WORD $0x8b48; BYTE $0x16 // mov    rdx, qword [rsi]
	LONG $0x08c68348         // add    rsi, 8
	WORD $0x2148; BYTE $0x17 // and    qword [rdi], rdx
	LONG $0x08c78348         // add    rdi, 8
	WORD $0xff48; BYTE $0xc0 // inc    rax
	JNE  LBB4_15

LBB4_16:
	LONG $0x18f98348 // cmp    rcx, 24
	JB   LBB4_18

LBB4_17:
	WORD $0x8b48; BYTE $0x06 // mov    rax, qword [rsi]
	WORD $0x2148; BYTE $0x07 // and    qword [rdi], rax
	LONG $0x08468b48         // mov    rax, qword [rsi + 8]
	LONG $0x08472148         // and    qword [rdi + 8], rax
	LONG $0x10468b48         // mov    rax, qword [rsi + 16]
	LONG $0x10472148         // and    qword [rdi + 16], rax
	LONG $0x18468b48         // mov    rax, qword [rsi + 24]
	LONG $0x18472148         // and    qword [rdi + 24], rax
	LONG $0x20c78348         // add    rdi, 32
	LONG $0x20c68348         // add    rsi, 32
	WORD $0x394c; BYTE $0xd7 // cmp    rdi, r10
	JB   LBB4_17

LBB4_18:
	RET

TEXT ·_asm_and2_sse4_2(SB), $0-32

	MOVQ addr+0(FP), DI
	MOVQ addr1+8(FP), SI
	MOVQ addr2+16(FP), DX
	MOVQ len+24(FP), CX

	WORD $0x8548; BYTE $0xc9               // test    rcx, rcx
	JLE  LBB5_18
	LONG $0xcf148d4c                       // lea    r10, [rdi + 8*rcx]
	LONG $0x08478d48                       // lea    rax, [rdi + 8]
	WORD $0x3949; BYTE $0xc2               // cmp    r10, rax
	WORD $0x8949; BYTE $0xc1               // mov    r9, rax
	LONG $0xca470f4d                       // cmova    r9, r10
	WORD $0x8948; BYTE $0xf9               // mov    rcx, rdi
	WORD $0xf748; BYTE $0xd1               // not    rcx
	WORD $0x0149; BYTE $0xc9               // add    r9, rcx
	LONG $0x03e9c149                       // shr    r9, 3
	WORD $0xff49; BYTE $0xc1               // inc    r9
	LONG $0x04f98349                       // cmp    r9, 4
	JB   LBB5_13
	QUAD $0xfffffffffffcb849; WORD $0x3fff // mov    r8, 4611686018427387900
	WORD $0x214d; BYTE $0xc8               // and    r8, r9
	JE   LBB5_13
	WORD $0x3949; BYTE $0xc2               // cmp    r10, rax
	LONG $0xc2470f49                       // cmova    rax, r10
	WORD $0x0148; BYTE $0xc8               // add    rax, rcx
	LONG $0xf8e08348                       // and    rax, -8
	LONG $0x074c8d48; BYTE $0x08           // lea    rcx, [rdi + rax + 8]
	LONG $0x065c8d48; BYTE $0x08           // lea    rbx, [rsi + rax + 8]
	LONG $0x025c8d4c; BYTE $0x08           // lea    r11, [rdx + rax + 8]
	WORD $0x3948; BYTE $0xdf               // cmp    rdi, rbx
	WORD $0xc018                           // sbb    al, al
	WORD $0x3948; BYTE $0xce               // cmp    rsi, rcx
	WORD $0xdb18                           // sbb    bl, bl
	WORD $0xc320                           // and    bl, al
	WORD $0x394c; BYTE $0xdf               // cmp    rdi, r11
	WORD $0xc018                           // sbb    al, al
	WORD $0x3948; BYTE $0xca               // cmp    rdx, rcx
	WORD $0xc918                           // sbb    cl, cl
	WORD $0xc3f6; BYTE $0x01               // test    bl, 1
	JNE  LBB5_13
	WORD $0xc820                           // and    al, cl
	WORD $0x0124                           // and    al, 1
	JNE  LBB5_13
	LONG $0xfc488d49                       // lea    rcx, [r8 - 4]
	WORD $0x8948; BYTE $0xc8               // mov    rax, rcx
	LONG $0x02e8c148                       // shr    rax, 2
	LONG $0xe1ba0f48; BYTE $0x02           // bt    rcx, 2
	JB   LBB5_6
	WORD $0x100f; BYTE $0x06               // movups    xmm0, oword [rsi]
	LONG $0x104e100f                       // movups    xmm1, oword [rsi + 16]
	WORD $0x100f; BYTE $0x12               // movups    xmm2, oword [rdx]
	LONG $0x105a100f                       // movups    xmm3, oword [rdx + 16]
	WORD $0x540f; BYTE $0xd0               // andps    xmm2, xmm0
	WORD $0x540f; BYTE $0xd9               // andps    xmm3, xmm1
	WORD $0x100f; BYTE $0x07               // movups    xmm0, oword [rdi]
	LONG $0x104f100f                       // movups    xmm1, oword [rdi + 16]
	WORD $0x540f; BYTE $0xc2               // andps    xmm0, xmm2
	WORD $0x540f; BYTE $0xcb               // andps    xmm1, xmm3
	WORD $0x110f; BYTE $0x07               // movups    oword [rdi], xmm0
	LONG $0x104f110f                       // movups    oword [rdi + 16], xmm1
	LONG $0x000004bb; BYTE $0x00           // mov    ebx, 4
	JMP  LBB5_8

LBB5_6:
	WORD $0xdb31 // xor    ebx, ebx

LBB5_8:
	WORD $0x8548; BYTE $0xc0     // test    rax, rax
	JE   LBB5_11
	WORD $0x894d; BYTE $0xc3     // mov    r11, r8
	WORD $0x2949; BYTE $0xdb     // sub    r11, rbx
	LONG $0xda448d48; BYTE $0x30 // lea    rax, [rdx + 8*rbx + 48]
	LONG $0xde4c8d48; BYTE $0x30 // lea    rcx, [rsi + 8*rbx + 48]
	LONG $0xdf5c8d48; BYTE $0x30 // lea    rbx, [rdi + 8*rbx + 48]

LBB5_10:
	LONG $0xd041100f         // movups    xmm0, oword [rcx - 48]
	LONG $0xe049100f         // movups    xmm1, oword [rcx - 32]
	LONG $0xd050100f         // movups    xmm2, oword [rax - 48]
	LONG $0xe058100f         // movups    xmm3, oword [rax - 32]
	WORD $0x540f; BYTE $0xd0 // andps    xmm2, xmm0
	WORD $0x540f; BYTE $0xd9 // andps    xmm3, xmm1
	LONG $0xd043100f         // movups    xmm0, oword [rbx - 48]
	LONG $0xe04b100f         // movups    xmm1, oword [rbx - 32]
	WORD $0x540f; BYTE $0xc2 // andps    xmm0, xmm2
	WORD $0x540f; BYTE $0xcb // andps    xmm1, xmm3
	LONG $0xd043110f         // movups    oword [rbx - 48], xmm0
	LONG $0xe04b110f         // movups    oword [rbx - 32], xmm1
	LONG $0xf041100f         // movups    xmm0, oword [rcx - 16]
	WORD $0x100f; BYTE $0x09 // movups    xmm1, oword [rcx]
	LONG $0xf050100f         // movups    xmm2, oword [rax - 16]
	WORD $0x100f; BYTE $0x18 // movups    xmm3, oword [rax]
	WORD $0x540f; BYTE $0xd0 // andps    xmm2, xmm0
	WORD $0x540f; BYTE $0xd9 // andps    xmm3, xmm1
	LONG $0xf043100f         // movups    xmm0, oword [rbx - 16]
	WORD $0x100f; BYTE $0x0b // movups    xmm1, oword [rbx]
	WORD $0x540f; BYTE $0xc2 // andps    xmm0, xmm2
	WORD $0x540f; BYTE $0xcb // andps    xmm1, xmm3
	LONG $0xf043110f         // movups    oword [rbx - 16], xmm0
	WORD $0x110f; BYTE $0x0b // movups    oword [rbx], xmm1
	LONG $0x40c08348         // add    rax, 64
	LONG $0x40c18348         // add    rcx, 64
	LONG $0x40c38348         // add    rbx, 64
	LONG $0xf8c38349         // add    r11, -8
	JNE  LBB5_10

LBB5_11:
	WORD $0x394d; BYTE $0xc1 // cmp    r9, r8
	JE   LBB5_18
	LONG $0xc73c8d4a         // lea    rdi, [rdi + 8*r8]
	LONG $0xc6348d4a         // lea    rsi, [rsi + 8*r8]
	LONG $0xc2148d4a         // lea    rdx, [rdx + 8*r8]

LBB5_13:
	LONG $0x084f8d48         // lea    rcx, [rdi + 8]
	WORD $0x3949; BYTE $0xca // cmp    r10, rcx
	LONG $0xca470f49         // cmova    rcx, r10
	WORD $0x8948; BYTE $0xf8 // mov    rax, rdi
	WORD $0xf748; BYTE $0xd0 // not    rax
	WORD $0x0148; BYTE $0xc8 // add    rax, rcx
	WORD $0xc189             // mov    ecx, eax
	WORD $0xe9c1; BYTE $0x03 // shr    ecx, 3
	WORD $0xc1ff             // inc    ecx
	LONG $0x03e18348         // and    rcx, 3
	JE   LBB5_16
	WORD $0xf748; BYTE $0xd9 // neg    rcx

LBB5_15:
	WORD $0x8b48; BYTE $0x1a // mov    rbx, qword [rdx]
	LONG $0x08c28348         // add    rdx, 8
	WORD $0x2348; BYTE $0x1e // and    rbx, qword [rsi]
	LONG $0x08c68348         // add    rsi, 8
	WORD $0x2148; BYTE $0x1f // and    qword [rdi], rbx
	LONG $0x08c78348         // add    rdi, 8
	WORD $0xff48; BYTE $0xc1 // inc    rcx
	JNE  LBB5_15

LBB5_16:
	LONG $0x18f88348 // cmp    rax, 24
	JB   LBB5_18

LBB5_17:
	WORD $0x8b48; BYTE $0x02 // mov    rax, qword [rdx]
	WORD $0x2348; BYTE $0x06 // and    rax, qword [rsi]
	WORD $0x2148; BYTE $0x07 // and    qword [rdi], rax
	LONG $0x08428b48         // mov    rax, qword [rdx + 8]
	LONG $0x08462348         // and    rax, qword [rsi + 8]
	LONG $0x08472148         // and    qword [rdi + 8], rax
	LONG $0x10428b48         // mov    rax, qword [rdx + 16]
	LONG $0x10462348         // and    rax, qword [rsi + 16]
	LONG $0x10472148         // and    qword [rdi + 16], rax
	LONG $0x18428b48         // mov    rax, qword [rdx + 24]
	LONG $0x18462348         // and    rax, qword [rsi + 24]
	LONG $0x18472148         // and    qword [rdi + 24], rax
	LONG $0x20c78348         // add    rdi, 32
	LONG $0x20c68348         // add    rsi, 32
	LONG $0x20c28348         // add    rdx, 32
	WORD $0x394c; BYTE $0xd7 // cmp    rdi, r10
	JB   LBB5_17

LBB5_18:
	RET

TEXT ·_asm_and4_sse4_2(SB), $32-48

	MOVQ addr+0(FP), DI
	MOVQ addr1+8(FP), SI
	MOVQ addr2+16(FP), DX
	MOVQ addr3+24(FP), CX
	MOVQ addr4+32(FP), R8
	MOVQ len+40(FP), R9
	ADDQ $8, SP

	WORD $0x854d; BYTE $0xc9               // test    r9, r9
	JLE  LBB6_16
	LONG $0xcf0c8d4e                       // lea    r9, [rdi + 8*r9]
	LONG $0x08478d48                       // lea    rax, [rdi + 8]
	WORD $0x3949; BYTE $0xc1               // cmp    r9, rax
	WORD $0x8949; BYTE $0xc7               // mov    r15, rax
	LONG $0xf9470f4d                       // cmova    r15, r9
	WORD $0x8948; BYTE $0xfb               // mov    rbx, rdi
	WORD $0xf748; BYTE $0xd3               // not    rbx
	WORD $0x0149; BYTE $0xdf               // add    r15, rbx
	LONG $0x03efc149                       // shr    r15, 3
	WORD $0xff49; BYTE $0xc7               // inc    r15
	LONG $0x04ff8349                       // cmp    r15, 4
	JB   LBB6_2
	QUAD $0xfffffffffffcba49; WORD $0x3fff // mov    r10, 4611686018427387900
	WORD $0x214d; BYTE $0xfa               // and    r10, r15
	JE   LBB6_2
	LONG $0x2454894c; BYTE $0x08           // mov    qword [rsp + 8], r10
	WORD $0x3949; BYTE $0xc1               // cmp    r9, rax
	LONG $0xc1470f49                       // cmova    rax, r9
	WORD $0x0148; BYTE $0xd8               // add    rax, rbx
	LONG $0xf8e08348                       // and    rax, -8
	LONG $0x07648d4c; BYTE $0x08           // lea    r12, [rdi + rax + 8]
	LONG $0x06548d4c; BYTE $0x08           // lea    r10, [rsi + rax + 8]
	LONG $0x025c8d4c; BYTE $0x08           // lea    r11, [rdx + rax + 8]
	LONG $0x01748d4c; BYTE $0x08           // lea    r14, [rcx + rax + 8]
	LONG $0x00448d49; BYTE $0x08           // lea    rax, [r8 + rax + 8]
	LONG $0x24448948; BYTE $0x10           // mov    qword [rsp + 16], rax
	WORD $0x394c; BYTE $0xd7               // cmp    rdi, r10
	WORD $0xc018                           // sbb    al, al
	WORD $0x394c; BYTE $0xe6               // cmp    rsi, r12
	WORD $0x1845; BYTE $0xed               // sbb    r13b, r13b
	WORD $0x2041; BYTE $0xc5               // and    r13b, al
	WORD $0x394c; BYTE $0xdf               // cmp    rdi, r11
	WORD $0xc018                           // sbb    al, al
	WORD $0x394c; BYTE $0xe2               // cmp    rdx, r12
	WORD $0xdb18                           // sbb    bl, bl
	LONG $0x07245c88                       // mov    byte [rsp + 7], bl
	WORD $0x394c; BYTE $0xf7               // cmp    rdi, r14
	WORD $0x1845; BYTE $0xdb               // sbb    r11b, r11b
	WORD $0x394c; BYTE $0xe1               // cmp    rcx, r12
	WORD $0x1845; BYTE $0xf6               // sbb    r14b, r14b
	LONG $0x247c3b48; BYTE $0x10           // cmp    rdi, qword [rsp + 16]
	WORD $0x1845; BYTE $0xd2               // sbb    r10b, r10b
	WORD $0x394d; BYTE $0xe0               // cmp    r8, r12
	WORD $0xdb18                           // sbb    bl, bl
	LONG $0x01c5f641                       // test    r13b, 1
	JNE  LBB6_2
	LONG $0x07244422                       // and    al, byte [rsp + 7]
	WORD $0x0124                           // and    al, 1
	JNE  LBB6_2
	WORD $0x2045; BYTE $0xf3               // and    r11b, r14b
	LONG $0x01e38041                       // and    r11b, 1
	JNE  LBB6_2
	WORD $0x2041; BYTE $0xda               // and    r10b, bl
	LONG $0x01e28041                       // and    r10b, 1
	JNE  LBB6_2
	LONG $0x24648b4c; BYTE $0x08           // mov    r12, qword [rsp + 8]
	LONG $0xe7348d4e                       // lea    r14, [rdi + 8*r12]
	LONG $0xe6148d4e                       // lea    r10, [rsi + 8*r12]
	LONG $0xe01c8d4f                       // lea    r11, [r8 + 8*r12]
	LONG $0xe1048d4a                       // lea    rax, [rcx + 8*r12]
	LONG $0xe21c8d4a                       // lea    rbx, [rdx + 8*r12]
	LONG $0x10c28348                       // add    rdx, 16
	LONG $0x10c18348                       // add    rcx, 16
	LONG $0x10c08349                       // add    r8, 16
	LONG $0x10c68348                       // add    rsi, 16
	LONG $0x10c78348                       // add    rdi, 16
	WORD $0x894d; BYTE $0xe5               // mov    r13, r12

LBB6_9:
	LONG $0xf046100f             // movups    xmm0, oword [rsi - 16]
	WORD $0x100f; BYTE $0x0e     // movups    xmm1, oword [rsi]
	LONG $0xf052100f             // movups    xmm2, oword [rdx - 16]
	WORD $0x100f; BYTE $0x1a     // movups    xmm3, oword [rdx]
	WORD $0x540f; BYTE $0xd0     // andps    xmm2, xmm0
	WORD $0x540f; BYTE $0xd9     // andps    xmm3, xmm1
	LONG $0xf041100f             // movups    xmm0, oword [rcx - 16]
	WORD $0x100f; BYTE $0x09     // movups    xmm1, oword [rcx]
	LONG $0x60100f41; BYTE $0xf0 // movups    xmm4, oword [r8 - 16]
	LONG $0x28100f41             // movups    xmm5, oword [r8]
	WORD $0x540f; BYTE $0xe0     // andps    xmm4, xmm0
	WORD $0x540f; BYTE $0xe2     // andps    xmm4, xmm2
	WORD $0x540f; BYTE $0xe9     // andps    xmm5, xmm1
	WORD $0x540f; BYTE $0xeb     // andps    xmm5, xmm3
	LONG $0xf047100f             // movups    xmm0, oword [rdi - 16]
	WORD $0x100f; BYTE $0x0f     // movups    xmm1, oword [rdi]
	WORD $0x540f; BYTE $0xc4     // andps    xmm0, xmm4
	WORD $0x540f; BYTE $0xcd     // andps    xmm1, xmm5
	LONG $0xf047110f             // movups    oword [rdi - 16], xmm0
	WORD $0x110f; BYTE $0x0f     // movups    oword [rdi], xmm1
	LONG $0x20c28348             // add    rdx, 32
	LONG $0x20c18348             // add    rcx, 32
	LONG $0x20c08349             // add    r8, 32
	LONG $0x20c68348             // add    rsi, 32
	LONG $0x20c78348             // add    rdi, 32
	LONG $0xfcc58349             // add    r13, -4
	JNE  LBB6_9
	WORD $0x394d; BYTE $0xe7     // cmp    r15, r12
	JNE  LBB6_11
	JMP  LBB6_16

LBB6_2:
	WORD $0x8949; BYTE $0xfe // mov    r14, rdi
	WORD $0x8949; BYTE $0xf2 // mov    r10, rsi
	WORD $0x894d; BYTE $0xc3 // mov    r11, r8
	WORD $0x8948; BYTE $0xc8 // mov    rax, rcx
	WORD $0x8948; BYTE $0xd3 // mov    rbx, rdx

LBB6_11:
	LONG $0x084e8d49             // lea    rcx, [r14 + 8]
	WORD $0x3949; BYTE $0xc9     // cmp    r9, rcx
	WORD $0x8948; BYTE $0xca     // mov    rdx, rcx
	LONG $0xd1470f49             // cmova    rdx, r9
	WORD $0x894c; BYTE $0xf6     // mov    rsi, r14
	WORD $0xf748; BYTE $0xd6     // not    rsi
	WORD $0x0148; BYTE $0xd6     // add    rsi, rdx
	WORD $0x8948; BYTE $0xf2     // mov    rdx, rsi
	LONG $0x03eac148             // shr    rdx, 3
	LONG $0xe6ba0f48; BYTE $0x03 // bt    rsi, 3
	JB   LBB6_12
	WORD $0x8b48; BYTE $0x33     // mov    rsi, qword [rbx]
	LONG $0x08c38348             // add    rbx, 8
	WORD $0x2349; BYTE $0x32     // and    rsi, qword [r10]
	LONG $0x08c28349             // add    r10, 8
	WORD $0x2348; BYTE $0x30     // and    rsi, qword [rax]
	LONG $0x08c08348             // add    rax, 8
	WORD $0x2349; BYTE $0x33     // and    rsi, qword [r11]
	LONG $0x08c38349             // add    r11, 8
	WORD $0x2149; BYTE $0x36     // and    qword [r14], rsi
	JMP  LBB6_14

LBB6_12:
	WORD $0x894c; BYTE $0xf1 // mov    rcx, r14

LBB6_14:
	WORD $0x8548; BYTE $0xd2 // test    rdx, rdx
	JE   LBB6_16

LBB6_15:
	WORD $0x8b48; BYTE $0x13 // mov    rdx, qword [rbx]
	WORD $0x2349; BYTE $0x12 // and    rdx, qword [r10]
	WORD $0x2348; BYTE $0x10 // and    rdx, qword [rax]
	WORD $0x2349; BYTE $0x13 // and    rdx, qword [r11]
	WORD $0x2148; BYTE $0x11 // and    qword [rcx], rdx
	LONG $0x08538b48         // mov    rdx, qword [rbx + 8]
	LONG $0x08522349         // and    rdx, qword [r10 + 8]
	LONG $0x08502348         // and    rdx, qword [rax + 8]
	LONG $0x08532349         // and    rdx, qword [r11 + 8]
	LONG $0x08512148         // and    qword [rcx + 8], rdx
	LONG $0x10c18348         // add    rcx, 16
	LONG $0x10c28349         // add    r10, 16
	LONG $0x10c38348         // add    rbx, 16
	LONG $0x10c08348         // add    rax, 16
	LONG $0x10c38349         // add    r11, 16
	WORD $0x394c; BYTE $0xc9 // cmp    rcx, r9
	JB   LBB6_15

LBB6_16:
	SUBQ $8, SP
	RET

TEXT ·_asm_or_sse4_2(SB), $0-24

	MOVQ addr+0(FP), DI
	MOVQ addr1+8(FP), SI
	MOVQ len+16(FP), DX

	WORD $0x8548; BYTE $0xd2               // test    rdx, rdx
	JLE  LBB7_18
	LONG $0xd7148d4c                       // lea    r10, [rdi + 8*rdx]
	LONG $0x08478d48                       // lea    rax, [rdi + 8]
	WORD $0x3949; BYTE $0xc2               // cmp    r10, rax
	WORD $0x8949; BYTE $0xc1               // mov    r9, rax
	LONG $0xca470f4d                       // cmova    r9, r10
	WORD $0x8948; BYTE $0xf9               // mov    rcx, rdi
	WORD $0xf748; BYTE $0xd1               // not    rcx
	WORD $0x0149; BYTE $0xc9               // add    r9, rcx
	LONG $0x03e9c149                       // shr    r9, 3
	WORD $0xff49; BYTE $0xc1               // inc    r9
	LONG $0x04f98349                       // cmp    r9, 4
	JB   LBB7_13
	QUAD $0xfffffffffffcb849; WORD $0x3fff // mov    r8, 4611686018427387900
	WORD $0x214d; BYTE $0xc8               // and    r8, r9
	JE   LBB7_13
	WORD $0x3949; BYTE $0xc2               // cmp    r10, rax
	LONG $0xc2470f49                       // cmova    rax, r10
	WORD $0x0148; BYTE $0xc8               // add    rax, rcx
	LONG $0xf8e08348                       // and    rax, -8
	LONG $0x064c8d48; BYTE $0x08           // lea    rcx, [rsi + rax + 8]
	WORD $0x3948; BYTE $0xf9               // cmp    rcx, rdi
	JBE  LBB7_5
	LONG $0x07448d48; BYTE $0x08           // lea    rax, [rdi + rax + 8]
	WORD $0x3948; BYTE $0xf0               // cmp    rax, rsi
	JA   LBB7_13

LBB7_5:
	LONG $0xfc488d49               // lea    rcx, [r8 - 4]
	WORD $0x8948; BYTE $0xc8       // mov    rax, rcx
	LONG $0x02e8c148               // shr    rax, 2
	LONG $0xe1ba0f48; BYTE $0x02   // bt    rcx, 2
	JB   LBB7_6
	WORD $0x100f; BYTE $0x06       // movups    xmm0, oword [rsi]
	LONG $0x104e100f               // movups    xmm1, oword [rsi + 16]
	WORD $0x100f; BYTE $0x17       // movups    xmm2, oword [rdi]
	LONG $0x105f100f               // movups    xmm3, oword [rdi + 16]
	WORD $0x560f; BYTE $0xd0       // orps    xmm2, xmm0
	WORD $0x560f; BYTE $0xd9       // orps    xmm3, xmm1
	WORD $0x110f; BYTE $0x17       // movups    oword [rdi], xmm2
	LONG $0x105f110f               // movups    oword [rdi + 16], xmm3
	LONG $0x0004bb41; WORD $0x0000 // mov    r11d, 4
	JMP  LBB7_8

LBB7_6:
	WORD $0x3145; BYTE $0xdb // xor    r11d, r11d

LBB7_8:
	WORD $0x8548; BYTE $0xc0     // test    rax, rax
	JE   LBB7_11
	WORD $0x894c; BYTE $0xc2     // mov    rdx, r8
	WORD $0x294c; BYTE $0xda     // sub    rdx, r11
	LONG $0xde4c8d4a; BYTE $0x30 // lea    rcx, [rsi + 8*r11 + 48]
	LONG $0xdf448d4a; BYTE $0x30 // lea    rax, [rdi + 8*r11 + 48]

LBB7_10:
	LONG $0xd041100f         // movups    xmm0, oword [rcx - 48]
	LONG $0xe049100f         // movups    xmm1, oword [rcx - 32]
	LONG $0xd050100f         // movups    xmm2, oword [rax - 48]
	LONG $0xe058100f         // movups    xmm3, oword [rax - 32]
	WORD $0x560f; BYTE $0xd0 // orps    xmm2, xmm0
	WORD $0x560f; BYTE $0xd9 // orps    xmm3, xmm1
	LONG $0xd050110f         // movups    oword [rax - 48], xmm2
	LONG $0xe058110f         // movups    oword [rax - 32], xmm3
	LONG $0xf041100f         // movups    xmm0, oword [rcx - 16]
	WORD $0x100f; BYTE $0x09 // movups    xmm1, oword [rcx]
	LONG $0xf050100f         // movups    xmm2, oword [rax - 16]
	WORD $0x100f; BYTE $0x18 // movups    xmm3, oword [rax]
	WORD $0x560f; BYTE $0xd0 // orps    xmm2, xmm0
	WORD $0x560f; BYTE $0xd9 // orps    xmm3, xmm1
	LONG $0xf050110f         // movups    oword [rax - 16], xmm2
	WORD $0x110f; BYTE $0x18 // movups    oword [rax], xmm3
	LONG $0x40c18348         // add    rcx, 64
	LONG $0x40c08348         // add    rax, 64
	LONG $0xf8c28348         // add    rdx, -8
	JNE  LBB7_10

LBB7_11:
	WORD $0x394d; BYTE $0xc1 // cmp    r9, r8
	JE   LBB7_18
	LONG $0xc73c8d4a         // lea    rdi, [rdi + 8*r8]
	LONG $0xc6348d4a         // lea    rsi, [rsi + 8*r8]

LBB7_13:
	LONG $0x08478d48         // lea    rax, [rdi + 8]
	WORD $0x3949; BYTE $0xc2 // cmp    r10, rax
	LONG $0xc2470f49         // cmova    rax, r10
	WORD $0x8948; BYTE $0xf9 // mov    rcx, rdi
	WORD $0xf748; BYTE $0xd1 // not    rcx
	WORD $0x0148; BYTE $0xc1 // add    rcx, rax
	WORD $0xc889             // mov    eax, ecx
	WORD $0xe8c1; BYTE $0x03 // shr    eax, 3
	WORD $0xc0ff             // inc    eax
	LONG $0x03e08348         // and    rax, 3
	JE   LBB7_16
	WORD $0xf748; BYTE $0xd8 // neg    rax

LBB7_15:
	WORD $0x8b48; BYTE $0x16 // mov    rdx, qword [rsi]
	LONG $0x08c68348         // add    rsi, 8
	WORD $0x0948; BYTE $0x17 // or    qword [rdi], rdx
	LONG $0x08c78348         // add    rdi, 8
	WORD $0xff48; BYTE $0xc0 // inc    rax
	JNE  LBB7_15

LBB7_16:
	LONG $0x18f98348 // cmp    rcx, 24
	JB   LBB7_18

LBB7_17:
	WORD $0x8b48; BYTE $0x06 // mov    rax, qword [rsi]
	WORD $0x0948; BYTE $0x07 // or    qword [rdi], rax
	LONG $0x08468b48         // mov    rax, qword [rsi + 8]
	LONG $0x08470948         // or    qword [rdi + 8], rax
	LONG $0x10468b48         // mov    rax, qword [rsi + 16]
	LONG $0x10470948         // or    qword [rdi + 16], rax
	LONG $0x18468b48         // mov    rax, qword [rsi + 24]
	LONG $0x18470948         // or    qword [rdi + 24], rax
	LONG $0x20c78348         // add    rdi, 32
	LONG $0x20c68348         // add    rsi, 32
	WORD $0x394c; BYTE $0xd7 // cmp    rdi, r10
	JB   LBB7_17

LBB7_18:
	RET

TEXT ·_asm_or2_sse4_2(SB), $0-32

	MOVQ addr+0(FP), DI
	MOVQ addr1+8(FP), SI
	MOVQ addr2+16(FP), DX
	MOVQ len+24(FP), CX

	WORD $0x8548; BYTE $0xc9               // test    rcx, rcx
	JLE  LBB8_18
	LONG $0xcf148d4c                       // lea    r10, [rdi + 8*rcx]
	LONG $0x08478d48                       // lea    rax, [rdi + 8]
	WORD $0x3949; BYTE $0xc2               // cmp    r10, rax
	WORD $0x8949; BYTE $0xc1               // mov    r9, rax
	LONG $0xca470f4d                       // cmova    r9, r10
	WORD $0x8948; BYTE $0xf9               // mov    rcx, rdi
	WORD $0xf748; BYTE $0xd1               // not    rcx
	WORD $0x0149; BYTE $0xc9               // add    r9, rcx
	LONG $0x03e9c149                       // shr    r9, 3
	WORD $0xff49; BYTE $0xc1               // inc    r9
	LONG $0x04f98349                       // cmp    r9, 4
	JB   LBB8_13
	QUAD $0xfffffffffffcb849; WORD $0x3fff // mov    r8, 4611686018427387900
	WORD $0x214d; BYTE $0xc8               // and    r8, r9
	JE   LBB8_13
	WORD $0x3949; BYTE $0xc2               // cmp    r10, rax
	LONG $0xc2470f49                       // cmova    rax, r10
	WORD $0x0148; BYTE $0xc8               // add    rax, rcx
	LONG $0xf8e08348                       // and    rax, -8
	LONG $0x074c8d48; BYTE $0x08           // lea    rcx, [rdi + rax + 8]
	LONG $0x065c8d48; BYTE $0x08           // lea    rbx, [rsi + rax + 8]
	LONG $0x025c8d4c; BYTE $0x08           // lea    r11, [rdx + rax + 8]
	WORD $0x3948; BYTE $0xdf               // cmp    rdi, rbx
	WORD $0xc018                           // sbb    al, al
	WORD $0x3948; BYTE $0xce               // cmp    rsi, rcx
	WORD $0xdb18                           // sbb    bl, bl
	WORD $0xc320                           // and    bl, al
	WORD $0x394c; BYTE $0xdf               // cmp    rdi, r11
	WORD $0xc018                           // sbb    al, al
	WORD $0x3948; BYTE $0xca               // cmp    rdx, rcx
	WORD $0xc918                           // sbb    cl, cl
	WORD $0xc3f6; BYTE $0x01               // test    bl, 1
	JNE  LBB8_13
	WORD $0xc820                           // and    al, cl
	WORD $0x0124                           // and    al, 1
	JNE  LBB8_13
	LONG $0xfc488d49                       // lea    rcx, [r8 - 4]
	WORD $0x8948; BYTE $0xc8               // mov    rax, rcx
	LONG $0x02e8c148                       // shr    rax, 2
	LONG $0xe1ba0f48; BYTE $0x02           // bt    rcx, 2
	JB   LBB8_6
	WORD $0x100f; BYTE $0x06               // movups    xmm0, oword [rsi]
	LONG $0x104e100f                       // movups    xmm1, oword [rsi + 16]
	WORD $0x100f; BYTE $0x12               // movups    xmm2, oword [rdx]
	LONG $0x105a100f                       // movups    xmm3, oword [rdx + 16]
	WORD $0x560f; BYTE $0xd0               // orps    xmm2, xmm0
	WORD $0x560f; BYTE $0xd9               // orps    xmm3, xmm1
	WORD $0x100f; BYTE $0x07               // movups    xmm0, oword [rdi]
	LONG $0x104f100f                       // movups    xmm1, oword [rdi + 16]
	WORD $0x560f; BYTE $0xc2               // orps    xmm0, xmm2
	WORD $0x560f; BYTE $0xcb               // orps    xmm1, xmm3
	WORD $0x110f; BYTE $0x07               // movups    oword [rdi], xmm0
	LONG $0x104f110f                       // movups    oword [rdi + 16], xmm1
	LONG $0x000004bb; BYTE $0x00           // mov    ebx, 4
	JMP  LBB8_8

LBB8_6:
	WORD $0xdb31 // xor    ebx, ebx

LBB8_8:
	WORD $0x8548; BYTE $0xc0     // test    rax, rax
	JE   LBB8_11
	WORD $0x894d; BYTE $0xc3     // mov    r11, r8
	WORD $0x2949; BYTE $0xdb     // sub    r11, rbx
	LONG $0xda448d48; BYTE $0x30 // lea    rax, [rdx + 8*rbx + 48]
	LONG $0xde4c8d48; BYTE $0x30 // lea    rcx, [rsi + 8*rbx + 48]
	LONG $0xdf5c8d48; BYTE $0x30 // lea    rbx, [rdi + 8*rbx + 48]

LBB8_10:
	LONG $0xd041100f         // movups    xmm0, oword [rcx - 48]
	LONG $0xe049100f         // movups    xmm1, oword [rcx - 32]
	LONG $0xd050100f         // movups    xmm2, oword [rax - 48]
	LONG $0xe058100f         // movups    xmm3, oword [rax - 32]
	WORD $0x560f; BYTE $0xd0 // orps    xmm2, xmm0
	WORD $0x560f; BYTE $0xd9 // orps    xmm3, xmm1
	LONG $0xd043100f         // movups    xmm0, oword [rbx - 48]
	LONG $0xe04b100f         // movups    xmm1, oword [rbx - 32]
	WORD $0x560f; BYTE $0xc2 // orps    xmm0, xmm2
	WORD $0x560f; BYTE $0xcb // orps    xmm1, xmm3
	LONG $0xd043110f         // movups    oword [rbx - 48], xmm0
	LONG $0xe04b110f         // movups    oword [rbx - 32], xmm1
	LONG $0xf041100f         // movups    xmm0, oword [rcx - 16]
	WORD $0x100f; BYTE $0x09 // movups    xmm1, oword [rcx]
	LONG $0xf050100f         // movups    xmm2, oword [rax - 16]
	WORD $0x100f; BYTE $0x18 // movups    xmm3, oword [rax]
	WORD $0x560f; BYTE $0xd0 // orps    xmm2, xmm0
	WORD $0x560f; BYTE $0xd9 // orps    xmm3, xmm1
	LONG $0xf043100f         // movups    xmm0, oword [rbx - 16]
	WORD $0x100f; BYTE $0x0b // movups    xmm1, oword [rbx]
	WORD $0x560f; BYTE $0xc2 // orps    xmm0, xmm2
	WORD $0x560f; BYTE $0xcb // orps    xmm1, xmm3
	LONG $0xf043110f         // movups    oword [rbx - 16], xmm0
	WORD $0x110f; BYTE $0x0b // movups    oword [rbx], xmm1
	LONG $0x40c08348         // add    rax, 64
	LONG $0x40c18348         // add    rcx, 64
	LONG $0x40c38348         // add    rbx, 64
	LONG $0xf8c38349         // add    r11, -8
	JNE  LBB8_10

LBB8_11:
	WORD $0x394d; BYTE $0xc1 // cmp    r9, r8
	JE   LBB8_18
	LONG $0xc73c8d4a         // lea    rdi, [rdi + 8*r8]
	LONG $0xc6348d4a         // lea    rsi, [rsi + 8*r8]
	LONG $0xc2148d4a         // lea    rdx, [rdx + 8*r8]

LBB8_13:
	LONG $0x084f8d48         // lea    rcx, [rdi + 8]
	WORD $0x3949; BYTE $0xca // cmp    r10, rcx
	LONG $0xca470f49         // cmova    rcx, r10
	WORD $0x8948; BYTE $0xf8 // mov    rax, rdi
	WORD $0xf748; BYTE $0xd0 // not    rax
	WORD $0x0148; BYTE $0xc8 // add    rax, rcx
	WORD $0xc189             // mov    ecx, eax
	WORD $0xe9c1; BYTE $0x03 // shr    ecx, 3
	WORD $0xc1ff             // inc    ecx
	LONG $0x03e18348         // and    rcx, 3
	JE   LBB8_16
	WORD $0xf748; BYTE $0xd9 // neg    rcx

LBB8_15:
	WORD $0x8b48; BYTE $0x1a // mov    rbx, qword [rdx]
	LONG $0x08c28348         // add    rdx, 8
	WORD $0x0b48; BYTE $0x1e // or    rbx, qword [rsi]
	LONG $0x08c68348         // add    rsi, 8
	WORD $0x0948; BYTE $0x1f // or    qword [rdi], rbx
	LONG $0x08c78348         // add    rdi, 8
	WORD $0xff48; BYTE $0xc1 // inc    rcx
	JNE  LBB8_15

LBB8_16:
	LONG $0x18f88348 // cmp    rax, 24
	JB   LBB8_18

LBB8_17:
	WORD $0x8b48; BYTE $0x02 // mov    rax, qword [rdx]
	WORD $0x0b48; BYTE $0x06 // or    rax, qword [rsi]
	WORD $0x0948; BYTE $0x07 // or    qword [rdi], rax
	LONG $0x08428b48         // mov    rax, qword [rdx + 8]
	LONG $0x08460b48         // or    rax, qword [rsi + 8]
	LONG $0x08470948         // or    qword [rdi + 8], rax
	LONG $0x10428b48         // mov    rax, qword [rdx + 16]
	LONG $0x10460b48         // or    rax, qword [rsi + 16]
	LONG $0x10470948         // or    qword [rdi + 16], rax
	LONG $0x18428b48         // mov    rax, qword [rdx + 24]
	LONG $0x18460b48         // or    rax, qword [rsi + 24]
	LONG $0x18470948         // or    qword [rdi + 24], rax
	LONG $0x20c78348         // add    rdi, 32
	LONG $0x20c68348         // add    rsi, 32
	LONG $0x20c28348         // add    rdx, 32
	WORD $0x394c; BYTE $0xd7 // cmp    rdi, r10
	JB   LBB8_17

LBB8_18:
	RET

TEXT ·_asm_or4_sse4_2(SB), $32-48

	MOVQ addr+0(FP), DI
	MOVQ addr1+8(FP), SI
	MOVQ addr2+16(FP), DX
	MOVQ addr3+24(FP), CX
	MOVQ addr4+32(FP), R8
	MOVQ len+40(FP), R9
	ADDQ $8, SP

	WORD $0x854d; BYTE $0xc9               // test    r9, r9
	JLE  LBB9_16
	LONG $0xcf0c8d4e                       // lea    r9, [rdi + 8*r9]
	LONG $0x08478d48                       // lea    rax, [rdi + 8]
	WORD $0x3949; BYTE $0xc1               // cmp    r9, rax
	WORD $0x8949; BYTE $0xc7               // mov    r15, rax
	LONG $0xf9470f4d                       // cmova    r15, r9
	WORD $0x8948; BYTE $0xfb               // mov    rbx, rdi
	WORD $0xf748; BYTE $0xd3               // not    rbx
	WORD $0x0149; BYTE $0xdf               // add    r15, rbx
	LONG $0x03efc149                       // shr    r15, 3
	WORD $0xff49; BYTE $0xc7               // inc    r15
	LONG $0x04ff8349                       // cmp    r15, 4
	JB   LBB9_2
	QUAD $0xfffffffffffcba49; WORD $0x3fff // mov    r10, 4611686018427387900
	WORD $0x214d; BYTE $0xfa               // and    r10, r15
	JE   LBB9_2
	LONG $0x2454894c; BYTE $0x08           // mov    qword [rsp + 8], r10
	WORD $0x3949; BYTE $0xc1               // cmp    r9, rax
	LONG $0xc1470f49                       // cmova    rax, r9
	WORD $0x0148; BYTE $0xd8               // add    rax, rbx
	LONG $0xf8e08348                       // and    rax, -8
	LONG $0x07648d4c; BYTE $0x08           // lea    r12, [rdi + rax + 8]
	LONG $0x06548d4c; BYTE $0x08           // lea    r10, [rsi + rax + 8]
	LONG $0x025c8d4c; BYTE $0x08           // lea    r11, [rdx + rax + 8]
	LONG $0x01748d4c; BYTE $0x08           // lea    r14, [rcx + rax + 8]
	LONG $0x00448d49; BYTE $0x08           // lea    rax, [r8 + rax + 8]
	LONG $0x24448948; BYTE $0x10           // mov    qword [rsp + 16], rax
	WORD $0x394c; BYTE $0xd7               // cmp    rdi, r10
	WORD $0xc018                           // sbb    al, al
	WORD $0x394c; BYTE $0xe6               // cmp    rsi, r12
	WORD $0x1845; BYTE $0xed               // sbb    r13b, r13b
	WORD $0x2041; BYTE $0xc5               // and    r13b, al
	WORD $0x394c; BYTE $0xdf               // cmp    rdi, r11
	WORD $0xc018                           // sbb    al, al
	WORD $0x394c; BYTE $0xe2               // cmp    rdx, r12
	WORD $0xdb18                           // sbb    bl, bl
	LONG $0x07245c88                       // mov    byte [rsp + 7], bl
	WORD $0x394c; BYTE $0xf7               // cmp    rdi, r14
	WORD $0x1845; BYTE $0xdb               // sbb    r11b, r11b
	WORD $0x394c; BYTE $0xe1               // cmp    rcx, r12
	WORD $0x1845; BYTE $0xf6               // sbb    r14b, r14b
	LONG $0x247c3b48; BYTE $0x10           // cmp    rdi, qword [rsp + 16]
	WORD $0x1845; BYTE $0xd2               // sbb    r10b, r10b
	WORD $0x394d; BYTE $0xe0               // cmp    r8, r12
	WORD $0xdb18                           // sbb    bl, bl
	LONG $0x01c5f641                       // test    r13b, 1
	JNE  LBB9_2
	LONG $0x07244422                       // and    al, byte [rsp + 7]
	WORD $0x0124                           // and    al, 1
	JNE  LBB9_2
	WORD $0x2045; BYTE $0xf3               // and    r11b, r14b
	LONG $0x01e38041                       // and    r11b, 1
	JNE  LBB9_2
	WORD $0x2041; BYTE $0xda               // and    r10b, bl
	LONG $0x01e28041                       // and    r10b, 1
	JNE  LBB9_2
	LONG $0x24648b4c; BYTE $0x08           // mov    r12, qword [rsp + 8]
	LONG $0xe7348d4e                       // lea    r14, [rdi + 8*r12]
	LONG $0xe6148d4e                       // lea    r10, [rsi + 8*r12]
	LONG $0xe01c8d4f                       // lea    r11, [r8 + 8*r12]
	LONG $0xe1048d4a                       // lea    rax, [rcx + 8*r12]
	LONG $0xe21c8d4a                       // lea    rbx, [rdx + 8*r12]
	LONG $0x10c28348                       // add    rdx, 16
	LONG $0x10c18348                       // add    rcx, 16
	LONG $0x10c08349                       // add    r8, 16
	LONG $0x10c68348                       // add    rsi, 16
	LONG $0x10c78348                       // add    rdi, 16
	WORD $0x894d; BYTE $0xe5               // mov    r13, r12

LBB9_9:
	LONG $0xf046100f             // movups    xmm0, oword [rsi - 16]
	WORD $0x100f; BYTE $0x0e     // movups    xmm1, oword [rsi]
	LONG $0xf052100f             // movups    xmm2, oword [rdx - 16]
	WORD $0x100f; BYTE $0x1a     // movups    xmm3, oword [rdx]
	WORD $0x560f; BYTE $0xd0     // orps    xmm2, xmm0
	WORD $0x560f; BYTE $0xd9     // orps    xmm3, xmm1
	LONG $0xf041100f             // movups    xmm0, oword [rcx - 16]
	WORD $0x100f; BYTE $0x09     // movups    xmm1, oword [rcx]
	LONG $0x60100f41; BYTE $0xf0 // movups    xmm4, oword [r8 - 16]
	LONG $0x28100f41             // movups    xmm5, oword [r8]
	WORD $0x560f; BYTE $0xe0     // orps    xmm4, xmm0
	WORD $0x560f; BYTE $0xe2     // orps    xmm4, xmm2
	WORD $0x560f; BYTE $0xe9     // orps    xmm5, xmm1
	WORD $0x560f; BYTE $0xeb     // orps    xmm5, xmm3
	LONG $0xf047100f             // movups    xmm0, oword [rdi - 16]
	WORD $0x100f; BYTE $0x0f     // movups    xmm1, oword [rdi]
	WORD $0x560f; BYTE $0xc4     // orps    xmm0, xmm4
	WORD $0x560f; BYTE $0xcd     // orps    xmm1, xmm5
	LONG $0xf047110f             // movups    oword [rdi - 16], xmm0
	WORD $0x110f; BYTE $0x0f     // movups    oword [rdi], xmm1
	LONG $0x20c28348             // add    rdx, 32
	LONG $0x20c18348             // add    rcx, 32
	LONG $0x20c08349             // add    r8, 32
	LONG $0x20c68348             // add    rsi, 32
	LONG $0x20c78348             // add    rdi, 32
	LONG $0xfcc58349             // add    r13, -4
	JNE  LBB9_9
	WORD $0x394d; BYTE $0xe7     // cmp    r15, r12
	JNE  LBB9_11
	JMP  LBB9_16

LBB9_2:
	WORD $0x8949; BYTE $0xfe // mov    r14, rdi
	WORD $0x8949; BYTE $0xf2 // mov    r10, rsi
	WORD $0x894d; BYTE $0xc3 // mov    r11, r8
	WORD $0x8948; BYTE $0xc8 // mov    rax, rcx
	WORD $0x8948; BYTE $0xd3 // mov    rbx, rdx

LBB9_11:
	LONG $0x084e8d49             // lea    rcx, [r14 + 8]
	WORD $0x3949; BYTE $0xc9     // cmp    r9, rcx
	WORD $0x8948; BYTE $0xca     // mov    rdx, rcx
	LONG $0xd1470f49             // cmova    rdx, r9
	WORD $0x894c; BYTE $0xf6     // mov    rsi, r14
	WORD $0xf748; BYTE $0xd6     // not    rsi
	WORD $0x0148; BYTE $0xd6     // add    rsi, rdx
	WORD $0x8948; BYTE $0xf2     // mov    rdx, rsi
	LONG $0x03eac148             // shr    rdx, 3
	LONG $0xe6ba0f48; BYTE $0x03 // bt    rsi, 3
	JB   LBB9_12
	WORD $0x8b48; BYTE $0x33     // mov    rsi, qword [rbx]
	LONG $0x08c38348             // add    rbx, 8
	WORD $0x0b49; BYTE $0x32     // or    rsi, qword [r10]
	LONG $0x08c28349             // add    r10, 8
	WORD $0x0b48; BYTE $0x30     // or    rsi, qword [rax]
	LONG $0x08c08348             // add    rax, 8
	WORD $0x0b49; BYTE $0x33     // or    rsi, qword [r11]
	LONG $0x08c38349             // add    r11, 8
	WORD $0x0949; BYTE $0x36     // or    qword [r14], rsi
	JMP  LBB9_14

LBB9_12:
	WORD $0x894c; BYTE $0xf1 // mov    rcx, r14

LBB9_14:
	WORD $0x8548; BYTE $0xd2 // test    rdx, rdx
	JE   LBB9_16

LBB9_15:
	WORD $0x8b48; BYTE $0x13 // mov    rdx, qword [rbx]
	WORD $0x0b49; BYTE $0x12 // or    rdx, qword [r10]
	WORD $0x0b48; BYTE $0x10 // or    rdx, qword [rax]
	WORD $0x0b49; BYTE $0x13 // or    rdx, qword [r11]
	WORD $0x0948; BYTE $0x11 // or    qword [rcx], rdx
	LONG $0x08538b48         // mov    rdx, qword [rbx + 8]
	LONG $0x08520b49         // or    rdx, qword [r10 + 8]
	LONG $0x08500b48         // or    rdx, qword [rax + 8]
	LONG $0x08530b49         // or    rdx, qword [r11 + 8]
	LONG $0x08510948         // or    qword [rcx + 8], rdx
	LONG $0x10c18348         // add    rcx, 16
	LONG $0x10c28349         // add    r10, 16
	LONG $0x10c38348         // add    rbx, 16
	LONG $0x10c08348         // add    rax, 16
	LONG $0x10c38349         // add    r11, 16
	WORD $0x394c; BYTE $0xc9 // cmp    rcx, r9
	JB   LBB9_15

LBB9_16:
	SUBQ $8, SP
	RET

TEXT ·_asm_andn_sse4_2(SB), $0-24

	MOVQ addr+0(FP), DI
	MOVQ addr1+8(FP), SI
	MOVQ len+16(FP), DX

	WORD $0x8548; BYTE $0xd2               // test    rdx, rdx
	JLE  LBB10_18
	LONG $0xd7148d4c                       // lea    r10, [rdi + 8*rdx]
	LONG $0x08478d48                       // lea    rax, [rdi + 8]
	WORD $0x3949; BYTE $0xc2               // cmp    r10, rax
	WORD $0x8949; BYTE $0xc1               // mov    r9, rax
	LONG $0xca470f4d                       // cmova    r9, r10
	WORD $0x8948; BYTE $0xf9               // mov    rcx, rdi
	WORD $0xf748; BYTE $0xd1               // not    rcx
	WORD $0x0149; BYTE $0xc9               // add    r9, rcx
	LONG $0x03e9c149                       // shr    r9, 3
	WORD $0xff49; BYTE $0xc1               // inc    r9
	LONG $0x04f98349                       // cmp    r9, 4
	JB   LBB10_13
	QUAD $0xfffffffffffcb849; WORD $0x3fff // mov    r8, 4611686018427387900
	WORD $0x214d; BYTE $0xc8               // and    r8, r9
	JE   LBB10_13
	WORD $0x3949; BYTE $0xc2               // cmp    r10, rax
	LONG $0xc2470f49                       // cmova    rax, r10
	WORD $0x0148; BYTE $0xc8               // add    rax, rcx
	LONG $0xf8e08348                       // and    rax, -8
	LONG $0x064c8d48; BYTE $0x08           // lea    rcx, [rsi + rax + 8]
	WORD $0x3948; BYTE $0xf9               // cmp    rcx, rdi
	JBE  LBB10_5
	LONG $0x07448d48; BYTE $0x08           // lea    rax, [rdi + rax + 8]
	WORD $0x3948; BYTE $0xf0               // cmp    rax, rsi
	JA   LBB10_13

LBB10_5:
	LONG $0xfc488d49               // lea    rcx, [r8 - 4]
	WORD $0x8948; BYTE $0xc8       // mov    rax, rcx
	LONG $0x02e8c148               // shr    rax, 2
	LONG $0xe1ba0f48; BYTE $0x02   // bt    rcx, 2
	JB   LBB10_6
	WORD $0x100f; BYTE $0x06       // movups    xmm0, oword [rsi]
	LONG $0x104e100f               // movups    xmm1, oword [rsi + 16]
	WORD $0x100f; BYTE $0x17       // movups    xmm2, oword [rdi]
	LONG $0x105f100f               // movups    xmm3, oword [rdi + 16]
	WORD $0x550f; BYTE $0xc2       // andnps    xmm0, xmm2
	WORD $0x550f; BYTE $0xcb       // andnps    xmm1, xmm3
	WORD $0x110f; BYTE $0x07       // movups    oword [rdi], xmm0
	LONG $0x104f110f               // movups    oword [rdi + 16], xmm1
	LONG $0x0004bb41; WORD $0x0000 // mov    r11d, 4
	JMP  LBB10_8

LBB10_6:
	WORD $0x3145; BYTE $0xdb // xor    r11d, r11d

LBB10_8:
	WORD $0x8548; BYTE $0xc0     // test    rax, rax
	JE   LBB10_11
	WORD $0x894c; BYTE $0xc2     // mov    rdx, r8
	WORD $0x294c; BYTE $0xda     // sub    rdx, r11
	LONG $0xde4c8d4a; BYTE $0x30 // lea    rcx, [rsi + 8*r11 + 48]
	LONG $0xdf448d4a; BYTE $0x30 // lea    rax, [rdi + 8*r11 + 48]

LBB10_10:
	LONG $0xd041100f         // movups    xmm0, oword [rcx - 48]
	LONG $0xe049100f         // movups    xmm1, oword [rcx - 32]
	LONG $0xd050100f         // movups    xmm2, oword [rax - 48]
	LONG $0xe058100f         // movups    xmm3, oword [rax - 32]
	WORD $0x550f; BYTE $0xc2 // andnps    xmm0, xmm2
	WORD $0x550f; BYTE $0xcb // andnps    xmm1, xmm3
	LONG $0xd040110f         // movups    oword [rax - 48], xmm0
	LONG $0xe048110f         // movups    oword [rax - 32], xmm1
	LONG $0xf041100f         // movups    xmm0, oword [rcx - 16]
	WORD $0x100f; BYTE $0x09 // movups    xmm1, oword [rcx]
	LONG $0xf050100f         // movups    xmm2, oword [rax - 16]
	WORD $0x100f; BYTE $0x18 // movups    xmm3, oword [rax]
	WORD $0x550f; BYTE $0xc2 // andnps    xmm0, xmm2
	WORD $0x550f; BYTE $0xcb // andnps    xmm1, xmm3
	LONG $0xf040110f         // movups    oword [rax - 16], xmm0
	WORD $0x110f; BYTE $0x08 // movups    oword [rax], xmm1
	LONG $0x40c18348         // add    rcx, 64
	LONG $0x40c08348         // add    rax, 64
	LONG $0xf8c28348         // add    rdx, -8
	JNE  LBB10_10

LBB10_11:
	WORD $0x394d; BYTE $0xc1 // cmp    r9, r8
	JE   LBB10_18
	LONG $0xc73c8d4a         // lea    rdi, [rdi + 8*r8]
	LONG $0xc6348d4a         // lea    rsi, [rsi + 8*r8]

LBB10_13:
	LONG $0x08478d48         // lea    rax, [rdi + 8]
	WORD $0x3949; BYTE $0xc2 // cmp    r10, rax
	LONG $0xc2470f49         // cmova    rax, r10
	WORD $0x8948; BYTE $0xf9 // mov    rcx, rdi
	WORD $0xf748; BYTE $0xd1 // not    rcx
	WORD $0x0148; BYTE $0xc1 // add    rcx, rax
	WORD $0xc889             // mov    eax, ecx
	WORD $0xe8c1; BYTE $0x03 // shr    eax, 3
	WORD $0xc0ff             // inc    eax
	LONG $0x03e08348         // and    rax, 3
	JE   LBB10_16
	WORD $0xf748; BYTE $0xd8 // neg    rax

LBB10_15:
	WORD $0x8b48; BYTE $0x16 // mov    rdx, qword [rsi]
	LONG $0x08c68348         // add    rsi, 8
	WORD $0xf748; BYTE $0xd2 // not    rdx
	WORD $0x2148; BYTE $0x17 // and    qword [rdi], rdx
	LONG $0x08c78348         // add    rdi, 8
	WORD $0xff48; BYTE $0xc0 // inc    rax
	JNE  LBB10_15

LBB10_16:
	LONG $0x18f98348 // cmp    rcx, 24
	JB   LBB10_18

LBB10_17:
	WORD $0x8b48; BYTE $0x06 // mov    rax, qword [rsi]
	WORD $0xf748; BYTE $0xd0 // not    rax
	WORD $0x2148; BYTE $0x07 // and    qword [rdi], rax
	LONG $0x08468b48         // mov    rax, qword [rsi + 8]
	WORD $0xf748; BYTE $0xd0 // not    rax
	LONG $0x08472148         // and    qword [rdi + 8], rax
	LONG $0x10468b48         // mov    rax, qword [rsi + 16]
	WORD $0xf748; BYTE $0xd0 // not    rax
	LONG $0x10472148         // and    qword [rdi + 16], rax
	LONG $0x18468b48         // mov    rax, qword [rsi + 24]
	WORD $0xf748; BYTE $0xd0 // not    rax
	LONG $0x18472148         // and    qword [rdi + 24], rax
	LONG $0x20c78348         // add    rdi, 32
	LONG $0x20c68348         // add    rsi, 32
	WORD $0x394c; BYTE $0xd7 // cmp    rdi, r10
	JB   LBB10_17

LBB10_18:
	RET

TEXT ·_asm_memcopy_sse4_2(SB), $0-24

	MOVQ addr+0(FP), DI
	MOVQ addr1+8(FP), SI
	MOVQ len+16(FP), DX

	WORD $0x8548; BYTE $0xd2 // test    rdx, rdx
	JLE  LBB11_15
	WORD $0x0148; BYTE $0xfa // add    rdx, rdi
	LONG $0x01478d48         // lea    rax, [rdi + 1]
	WORD $0x3948; BYTE $0xc2 // cmp    rdx, rax
	WORD $0x8949; BYTE $0xc2 // mov    r10, rax
	LONG $0xd2470f4c         // cmova    r10, rdx
	WORD $0x2949; BYTE $0xfa // sub    r10, rdi
	LONG $0x20fa8349         // cmp    r10, 32
	JB   LBB11_14
	WORD $0x894d; BYTE $0xd1 // mov    r9, r10
	LONG $0xe0e18349         // and    r9, -32
	JE   LBB11_14
	WORD $0x3948; BYTE $0xc2 // cmp    rdx, rax
	LONG $0xc2470f48         // cmova    rax, rdx
	WORD $0x8948; BYTE $0xc1 // mov    rcx, rax
	WORD $0x2948; BYTE $0xf9 // sub    rcx, rdi
	WORD $0x0148; BYTE $0xf1 // add    rcx, rsi
	WORD $0x3948; BYTE $0xf9 // cmp    rcx, rdi
	JBE  LBB11_5
	WORD $0x3948; BYTE $0xf0 // cmp    rax, rsi
	JA   LBB11_14

LBB11_5:
	LONG $0xe0418d4d         // lea    r8, [r9 - 32]
	WORD $0x8944; BYTE $0xc0 // mov    eax, r8d
	WORD $0xe8c1; BYTE $0x05 // shr    eax, 5
	WORD $0xc0ff             // inc    eax
	LONG $0x03e08348         // and    rax, 3
	JE   LBB11_6
	WORD $0xf748; BYTE $0xd8 // neg    rax
	WORD $0xc931             // xor    ecx, ecx

LBB11_8:
	LONG $0x0e04100f             // movups    xmm0, oword [rsi + rcx]
	LONG $0x0e4c100f; BYTE $0x10 // movups    xmm1, oword [rsi + rcx + 16]
	LONG $0x0f04110f             // movups    oword [rdi + rcx], xmm0
	LONG $0x0f4c110f; BYTE $0x10 // movups    oword [rdi + rcx + 16], xmm1
	LONG $0x20c18348             // add    rcx, 32
	WORD $0xff48; BYTE $0xc0     // inc    rax
	JNE  LBB11_8
	JMP  LBB11_9

LBB11_6:
	WORD $0xc931 // xor    ecx, ecx

LBB11_9:
	LONG $0x60f88349             // cmp    r8, 96
	JB   LBB11_12
	WORD $0x894d; BYTE $0xc8     // mov    r8, r9
	WORD $0x2949; BYTE $0xc8     // sub    r8, rcx
	LONG $0x0e448d48; BYTE $0x70 // lea    rax, [rsi + rcx + 112]
	LONG $0x0f4c8d48; BYTE $0x70 // lea    rcx, [rdi + rcx + 112]

LBB11_11:
	LONG $0x9040100f         // movups    xmm0, oword [rax - 112]
	LONG $0xa048100f         // movups    xmm1, oword [rax - 96]
	LONG $0x9041110f         // movups    oword [rcx - 112], xmm0
	LONG $0xa049110f         // movups    oword [rcx - 96], xmm1
	LONG $0xb040100f         // movups    xmm0, oword [rax - 80]
	LONG $0xc048100f         // movups    xmm1, oword [rax - 64]
	LONG $0xb041110f         // movups    oword [rcx - 80], xmm0
	LONG $0xc049110f         // movups    oword [rcx - 64], xmm1
	LONG $0xd040100f         // movups    xmm0, oword [rax - 48]
	LONG $0xe048100f         // movups    xmm1, oword [rax - 32]
	LONG $0xd041110f         // movups    oword [rcx - 48], xmm0
	LONG $0xe049110f         // movups    oword [rcx - 32], xmm1
	LONG $0xf040100f         // movups    xmm0, oword [rax - 16]
	WORD $0x100f; BYTE $0x08 // movups    xmm1, oword [rax]
	LONG $0xf041110f         // movups    oword [rcx - 16], xmm0
	WORD $0x110f; BYTE $0x09 // movups    oword [rcx], xmm1
	LONG $0x80e88348         // sub    rax, -128
	LONG $0x80e98348         // sub    rcx, -128
	LONG $0x80c08349         // add    r8, -128
	JNE  LBB11_11

LBB11_12:
	WORD $0x394d; BYTE $0xca // cmp    r10, r9
	JE   LBB11_15
	WORD $0x014c; BYTE $0xcf // add    rdi, r9
	WORD $0x014c; BYTE $0xce // add    rsi, r9

LBB11_14:
	WORD $0xb60f; BYTE $0x06 // movzx    eax, byte [rsi]
	WORD $0xff48; BYTE $0xc6 // inc    rsi
	WORD $0x0788             // mov    byte [rdi], al
	WORD $0xff48; BYTE $0xc7 // inc    rdi
	WORD $0x3948; BYTE $0xd7 // cmp    rdi, rdx
	JB   LBB11_14

LBB11_15:
	RET

TEXT ·_asm_memset_sse4_2(SB), $0-24

	MOVQ addr+0(FP), DI
	MOVQ v+8(FP), SI
	MOVQ len+16(FP), DX

	WORD $0x8548; BYTE $0xd2     // test    rdx, rdx
	JLE  LBB12_13
	WORD $0x0148; BYTE $0xfa     // add    rdx, rdi
	LONG $0x015f8d4c             // lea    r11, [rdi + 1]
	WORD $0x394c; BYTE $0xda     // cmp    rdx, r11
	LONG $0xda470f4c             // cmova    r11, rdx
	WORD $0x2949; BYTE $0xfb     // sub    r11, rdi
	LONG $0x20fb8349             // cmp    r11, 32
	JB   LBB12_12
	WORD $0x894d; BYTE $0xd8     // mov    r8, r11
	LONG $0xe0e08349             // and    r8, -32
	WORD $0x894d; BYTE $0xda     // mov    r10, r11
	LONG $0xe0e28349             // and    r10, -32
	JE   LBB12_12
	LONG $0xc6b60f40             // movzx    eax, sil
	LONG $0xc06e0f66             // movd    xmm0, eax
	LONG $0xc9ef0f66             // pxor    xmm1, xmm1
	LONG $0x00380f66; BYTE $0xc1 // pshufb    xmm0, xmm1
	LONG $0xe04a8d4d             // lea    r9, [r10 - 32]
	WORD $0x8944; BYTE $0xc9     // mov    ecx, r9d
	WORD $0xe9c1; BYTE $0x05     // shr    ecx, 5
	WORD $0xc1ff                 // inc    ecx
	LONG $0x07e18348             // and    rcx, 7
	JE   LBB12_4
	WORD $0xf748; BYTE $0xd9     // neg    rcx
	WORD $0xc031                 // xor    eax, eax

LBB12_6:
	LONG $0x047f0ff3; BYTE $0x07   // movdqu    oword [rdi + rax], xmm0
	LONG $0x447f0ff3; WORD $0x1007 // movdqu    oword [rdi + rax + 16], xmm0
	LONG $0x20c08348               // add    rax, 32
	WORD $0xff48; BYTE $0xc1       // inc    rcx
	JNE  LBB12_6
	JMP  LBB12_7

LBB12_4:
	WORD $0xc031 // xor    eax, eax

LBB12_7:
	LONG $0xe0f98149; WORD $0x0000; BYTE $0x00 // cmp    r9, 224
	JB   LBB12_10
	WORD $0x894c; BYTE $0xd1                   // mov    rcx, r10
	WORD $0x2948; BYTE $0xc1                   // sub    rcx, rax
	QUAD $0x000000f007848d48                   // lea    rax, [rdi + rax + 240]

LBB12_9:
	QUAD $0xffffff10807f0ff3                   // movdqu    oword [rax - 240], xmm0
	QUAD $0xffffff20807f0ff3                   // movdqu    oword [rax - 224], xmm0
	QUAD $0xffffff30807f0ff3                   // movdqu    oword [rax - 208], xmm0
	QUAD $0xffffff40807f0ff3                   // movdqu    oword [rax - 192], xmm0
	QUAD $0xffffff50807f0ff3                   // movdqu    oword [rax - 176], xmm0
	QUAD $0xffffff60807f0ff3                   // movdqu    oword [rax - 160], xmm0
	QUAD $0xffffff70807f0ff3                   // movdqu    oword [rax - 144], xmm0
	LONG $0x407f0ff3; BYTE $0x80               // movdqu    oword [rax - 128], xmm0
	LONG $0x407f0ff3; BYTE $0x90               // movdqu    oword [rax - 112], xmm0
	LONG $0x407f0ff3; BYTE $0xa0               // movdqu    oword [rax - 96], xmm0
	LONG $0x407f0ff3; BYTE $0xb0               // movdqu    oword [rax - 80], xmm0
	LONG $0x407f0ff3; BYTE $0xc0               // movdqu    oword [rax - 64], xmm0
	LONG $0x407f0ff3; BYTE $0xd0               // movdqu    oword [rax - 48], xmm0
	LONG $0x407f0ff3; BYTE $0xe0               // movdqu    oword [rax - 32], xmm0
	LONG $0x407f0ff3; BYTE $0xf0               // movdqu    oword [rax - 16], xmm0
	LONG $0x007f0ff3                           // movdqu    oword [rax], xmm0
	LONG $0x01000548; WORD $0x0000             // add    rax, 256
	LONG $0x00c18148; WORD $0xffff; BYTE $0xff // add    rcx, -256
	JNE  LBB12_9

LBB12_10:
	WORD $0x394d; BYTE $0xd3 // cmp    r11, r10
	JE   LBB12_13
	WORD $0x014c; BYTE $0xc7 // add    rdi, r8

LBB12_12:
	WORD $0x8840; BYTE $0x37 // mov    byte [rdi], sil
	WORD $0xff48; BYTE $0xc7 // inc    rdi
	WORD $0x3948; BYTE $0xd7 // cmp    rdi, rdx
	JB   LBB12_12

LBB12_13:
	RET

TEXT ·_asm_bitmap_get_bit_num_sse4_2(SB), $0-24

	MOVQ addr+0(FP), DI
	MOVQ len+8(FP), SI

	WORD $0x8548; BYTE $0xf6 // test    rsi, rsi
	JLE  LBB13_1
	LONG $0xf70c8d48         // lea    rcx, [rdi + 8*rsi]
	LONG $0x08478d48         // lea    rax, [rdi + 8]
	WORD $0x3948; BYTE $0xc1 // cmp    rcx, rax
	LONG $0xc1470f48         // cmova    rax, rcx
	WORD $0x8949; BYTE $0xf8 // mov    r8, rdi
	WORD $0xf749; BYTE $0xd0 // not    r8
	WORD $0x0149; BYTE $0xc0 // add    r8, rax
	WORD $0x8944; BYTE $0xc6 // mov    esi, r8d
	WORD $0xeec1; BYTE $0x03 // shr    esi, 3
	WORD $0xc6ff             // inc    esi
	LONG $0x07e68348         // and    rsi, 7
	JE   LBB13_3
	WORD $0xf748; BYTE $0xde // neg    rsi
	WORD $0xc031             // xor    eax, eax

LBB13_5:
	LONG $0xb80f48f3; BYTE $0x17 // popcnt    rdx, qword [rdi]
	LONG $0x08c78348             // add    rdi, 8
	WORD $0x0148; BYTE $0xd0     // add    rax, rdx
	WORD $0xff48; BYTE $0xc6     // inc    rsi
	JNE  LBB13_5
	JMP  LBB13_6

LBB13_1:
	WORD $0xc031 // xor    eax, eax
	JMP  LBB13_8

LBB13_3:
	WORD $0xc031 // xor    eax, eax

LBB13_6:
	LONG $0x38f88349 // cmp    r8, 56
	JB   LBB13_8

LBB13_7:
	LONG $0xb80f48f3; BYTE $0x17   // popcnt    rdx, qword [rdi]
	WORD $0x0148; BYTE $0xc2       // add    rdx, rax
	LONG $0xb80f48f3; WORD $0x0847 // popcnt    rax, qword [rdi + 8]
	WORD $0x0148; BYTE $0xd0       // add    rax, rdx
	LONG $0xb80f48f3; WORD $0x1057 // popcnt    rdx, qword [rdi + 16]
	WORD $0x0148; BYTE $0xc2       // add    rdx, rax
	LONG $0xb80f48f3; WORD $0x1847 // popcnt    rax, qword [rdi + 24]
	WORD $0x0148; BYTE $0xd0       // add    rax, rdx
	LONG $0xb80f48f3; WORD $0x2057 // popcnt    rdx, qword [rdi + 32]
	WORD $0x0148; BYTE $0xc2       // add    rdx, rax
	LONG $0xb80f48f3; WORD $0x2847 // popcnt    rax, qword [rdi + 40]
	WORD $0x0148; BYTE $0xd0       // add    rax, rdx
	LONG $0xb80f48f3; WORD $0x3057 // popcnt    rdx, qword [rdi + 48]
	WORD $0x0148; BYTE $0xc2       // add    rdx, rax
	LONG $0xb80f48f3; WORD $0x3847 // popcnt    rax, qword [rdi + 56]
	WORD $0x0148; BYTE $0xd0       // add    rax, rdx
	LONG $0x40c78348               // add    rdi, 64
	WORD $0x3948; BYTE $0xcf       // cmp    rdi, rcx
	JB   LBB13_7

LBB13_8:
	MOVQ AX, ret+16(FP)
	RET

TEXT ·_asm_bkdr_hash_sse4_2(SB), $0-32

	MOVQ addr+0(FP), DI
	MOVQ len+8(FP), SI
	MOVQ seed+16(FP), DX

	WORD $0x8548; BYTE $0xf6 // test    rsi, rsi
	JLE  LBB14_3
	WORD $0x0148; BYTE $0xfe // add    rsi, rdi

LBB14_2:
	LONG $0x6bc26948; WORD $0x1409; BYTE $0x00 // imul    rax, rdx, 1313131
	WORD $0xb60f; BYTE $0x17                   // movzx    edx, byte [rdi]
	WORD $0xff48; BYTE $0xc7                   // inc    rdi
	WORD $0x0148; BYTE $0xc2                   // add    rdx, rax
	WORD $0x3948; BYTE $0xf7                   // cmp    rdi, rsi
	JB   LBB14_2

LBB14_3:
	WORD $0x8948; BYTE $0xd0 // mov    rax, rdx
	MOVQ AX, ret+24(FP)
	RET

TEXT ·_asm_multi_and_sum_sse4_2(SB), $0-40

	MOVQ addr+0(FP), DI
	MOVQ addr1+8(FP), SI
	MOVQ len+16(FP), DX
	MOVQ seed+24(FP), CX

	WORD $0x8548; BYTE $0xd2 // test    rdx, rdx
	JLE  LBB15_1
	WORD $0x0148; BYTE $0xfa // add    rdx, rdi
	WORD $0x3145; BYTE $0xc0 // xor    r8d, r8d

LBB15_3:
	WORD $0xb60f; BYTE $0x07 // movzx    eax, byte [rdi]
	WORD $0xff48; BYTE $0xc7 // inc    rdi
	LONG $0x06af0f48         // imul    rax, qword [rsi]
	LONG $0x08c68348         // add    rsi, 8
	WORD $0x0149; BYTE $0xc0 // add    r8, rax
	WORD $0x3948; BYTE $0xd7 // cmp    rdi, rdx
	JB   LBB15_3
	JMP  LBB15_4

LBB15_1:
	WORD $0x3145; BYTE $0xc0 // xor    r8d, r8d

LBB15_4:
	LONG $0x4eaf0f48; BYTE $0xf8 // imul    rcx, qword [rsi - 8]
	WORD $0x014c; BYTE $0xc1     // add    rcx, r8
	WORD $0x8948; BYTE $0xc8     // mov    rax, rcx
	MOVQ AX, ret+32(FP)
	RET

TEXT ·_asm_bitmap_get_bit_list_sse4_2(SB), $0-40

	MOVQ addr+0(FP), DI
	MOVQ addr1+8(FP), SI
	MOVQ addr2+16(FP), DX
	MOVQ len+24(FP), CX

	WORD $0x8548; BYTE $0xc9               // test    rcx, rcx
	JLE  LBB16_1
	LONG $0xcf048d4c                       // lea    r8, [rdi + 8*rcx]
	WORD $0x3145; BYTE $0xd2               // xor    r10d, r10d
	QUAD $0x9d71b4ca8b09b949; WORD $0x03f7 // mov    r9, 285870213051353865
	WORD $0xc031                           // xor    eax, eax

LBB16_3:
	WORD $0x8b48; BYTE $0x0f     // mov    rcx, qword [rdi]
	LONG $0x08c78348             // add    rdi, 8
	WORD $0x8548; BYTE $0xc9     // test    rcx, rcx
	JE   LBB16_6
	LONG $0xb80f4cf3; BYTE $0xd9 // popcnt    r11, rcx
	WORD $0x014c; BYTE $0xd8     // add    rax, r11
	WORD $0xff49; BYTE $0xc3     // inc    r11

LBB16_5:
	WORD $0x8948; BYTE $0xcb // mov    rbx, rcx
	WORD $0xf748; BYTE $0xdb // neg    rbx
	WORD $0x2148; BYTE $0xcb // and    rbx, rcx
	LONG $0xd9af0f49         // imul    rbx, r9
	LONG $0x3aebc148         // shr    rbx, 58
	LONG $0x1a1cb60f         // movzx    ebx, byte [rdx + rbx]
	WORD $0x014c; BYTE $0xd3 // add    rbx, r10
	WORD $0x8948; BYTE $0x1e // mov    qword [rsi], rbx
	LONG $0x08c68348         // add    rsi, 8
	LONG $0xff598d48         // lea    rbx, [rcx - 1]
	WORD $0x2148; BYTE $0xd9 // and    rcx, rbx
	WORD $0xff49; BYTE $0xcb // dec    r11
	LONG $0x01fb8349         // cmp    r11, 1
	JG   LBB16_5

LBB16_6:
	LONG $0x40c28349         // add    r10, 64
	WORD $0x394c; BYTE $0xc7 // cmp    rdi, r8
	JB   LBB16_3
	JMP  LBB16_7

LBB16_1:
	WORD $0xc031 // xor    eax, eax

LBB16_7:
	MOVQ AX, ret+32(FP)
	RET
