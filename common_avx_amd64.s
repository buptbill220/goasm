//+build !noasm !appengine
// AUTO-GENERATED BY C2GOASM -- DO NOT EDIT

TEXT ·_asm_sum_avx(SB), $0-24

	MOVQ addr+0(FP), DI
	MOVQ len+8(FP), SI

	WORD $0x8548; BYTE $0xf6 // test    rsi, rsi
	JLE  LBB0_1
	LONG $0xf70c8d48         // lea    rcx, [rdi + 8*rsi]
	LONG $0x08478d48         // lea    rax, [rdi + 8]
	WORD $0x3948; BYTE $0xc1 // cmp    rcx, rax
	LONG $0xc1470f48         // cmova    rax, rcx
	WORD $0x8948; BYTE $0xfa // mov    rdx, rdi
	WORD $0xf748; BYTE $0xd2 // not    rdx
	WORD $0x0148; BYTE $0xc2 // add    rdx, rax
	LONG $0x03eac148         // shr    rdx, 3
	WORD $0xff48; BYTE $0xc2 // inc    rdx
	LONG $0x08fa8348         // cmp    rdx, 8
	JAE  LBB0_4
	WORD $0xc031             // xor    eax, eax
	JMP  LBB0_14

LBB0_1:
	WORD $0xc031 // xor    eax, eax
	JMP  LBB0_15

LBB0_4:
	QUAD $0xfffffffffff8b949; WORD $0x3fff // mov    r9, 4611686018427387896
	WORD $0x2149; BYTE $0xd1               // and    r9, rdx
	JE   LBB0_5
	LONG $0xf8718d49                       // lea    rsi, [r9 - 8]
	WORD $0x8948; BYTE $0xf0               // mov    rax, rsi
	LONG $0x03e8c148                       // shr    rax, 3
	LONG $0xe6ba0f48; BYTE $0x03           // bt    rsi, 3
	JB   LBB0_7
	LONG $0x076ffac5                       // vmovdqu    xmm0, oword [rdi]
	LONG $0x4f6ffac5; BYTE $0x10           // vmovdqu    xmm1, oword [rdi + 16]
	LONG $0x576ffac5; BYTE $0x20           // vmovdqu    xmm2, oword [rdi + 32]
	LONG $0x5f6ffac5; BYTE $0x30           // vmovdqu    xmm3, oword [rdi + 48]
	LONG $0x0008b841; WORD $0x0000         // mov    r8d, 8
	JMP  LBB0_9

LBB0_5:
	WORD $0xc031 // xor    eax, eax
	JMP  LBB0_14

LBB0_7:
	LONG $0xc0eff9c5         // vpxor    xmm0, xmm0, xmm0
	WORD $0x3145; BYTE $0xc0 // xor    r8d, r8d
	LONG $0xc9eff1c5         // vpxor    xmm1, xmm1, xmm1
	LONG $0xd2efe9c5         // vpxor    xmm2, xmm2, xmm2
	LONG $0xdbefe1c5         // vpxor    xmm3, xmm3, xmm3

LBB0_9:
	WORD $0x8548; BYTE $0xc0     // test    rax, rax
	JE   LBB0_12
	WORD $0x894c; BYTE $0xc8     // mov    rax, r9
	WORD $0x294c; BYTE $0xc0     // sub    rax, r8
	LONG $0xc7748d4a; BYTE $0x70 // lea    rsi, [rdi + 8*r8 + 112]

LBB0_11:
	LONG $0x46d4f9c5; BYTE $0x90 // vpaddq    xmm0, xmm0, oword [rsi - 112]
	LONG $0x4ed4f1c5; BYTE $0xa0 // vpaddq    xmm1, xmm1, oword [rsi - 96]
	LONG $0x56d4e9c5; BYTE $0xb0 // vpaddq    xmm2, xmm2, oword [rsi - 80]
	LONG $0x5ed4e1c5; BYTE $0xc0 // vpaddq    xmm3, xmm3, oword [rsi - 64]
	LONG $0x46d4f9c5; BYTE $0xd0 // vpaddq    xmm0, xmm0, oword [rsi - 48]
	LONG $0x4ed4f1c5; BYTE $0xe0 // vpaddq    xmm1, xmm1, oword [rsi - 32]
	LONG $0x56d4e9c5; BYTE $0xf0 // vpaddq    xmm2, xmm2, oword [rsi - 16]
	LONG $0x1ed4e1c5             // vpaddq    xmm3, xmm3, oword [rsi]
	LONG $0x80ee8348             // sub    rsi, -128
	LONG $0xf0c08348             // add    rax, -16
	JNE  LBB0_11

LBB0_12:
	LONG $0xc2d4f9c5             // vpaddq    xmm0, xmm0, xmm2
	LONG $0xcbd4f1c5             // vpaddq    xmm1, xmm1, xmm3
	LONG $0xc1d4f9c5             // vpaddq    xmm0, xmm0, xmm1
	LONG $0xc870f9c5; BYTE $0x4e // vpshufd    xmm1, xmm0, 78
	LONG $0xc1d4f9c5             // vpaddq    xmm0, xmm0, xmm1
	LONG $0x7ef9e1c4; BYTE $0xc0 // vmovq    rax, xmm0
	WORD $0x394c; BYTE $0xca     // cmp    rdx, r9
	JE   LBB0_15
	LONG $0xcf3c8d4a             // lea    rdi, [rdi + 8*r9]

LBB0_14:
	WORD $0x0348; BYTE $0x07 // add    rax, qword [rdi]
	LONG $0x08c78348         // add    rdi, 8
	WORD $0x3948; BYTE $0xcf // cmp    rdi, rcx
	JB   LBB0_14

LBB0_15:
	MOVQ AX, ret+16(FP)
	RET

DATA LCDATA1<>+0x000(SB)/8, $0x8000000000000000
DATA LCDATA1<>+0x008(SB)/8, $0x8000000000000000
DATA LCDATA1<>+0x010(SB)/8, $0x8000000000000000
DATA LCDATA1<>+0x018(SB)/8, $0x8000000000000000
GLOBL LCDATA1<>(SB), 8, $32

TEXT ·_asm_max_avx(SB), $0-24

	MOVQ addr+0(FP), DI
	MOVQ len+8(FP), SI
	LEAQ LCDATA1<>(SB), BP

	WORD $0x8548; BYTE $0xf6               // test    rsi, rsi
	JE   LBB1_1
	QUAD $0x000000000000b848; WORD $0x8000 // mov    rax, -9223372036854775808
	JLE  LBB1_14
	LONG $0xf70c8d48                       // lea    rcx, [rdi + 8*rsi]
	LONG $0x08778d48                       // lea    rsi, [rdi + 8]
	WORD $0x3948; BYTE $0xf1               // cmp    rcx, rsi
	LONG $0xf1470f48                       // cmova    rsi, rcx
	WORD $0x8948; BYTE $0xfa               // mov    rdx, rdi
	WORD $0xf748; BYTE $0xd2               // not    rdx
	WORD $0x0148; BYTE $0xf2               // add    rdx, rsi
	LONG $0x03eac148                       // shr    rdx, 3
	WORD $0xff48; BYTE $0xc2               // inc    rdx
	LONG $0x10fa8348                       // cmp    rdx, 16
	JB   LBB1_13
	QUAD $0xfffffffffff0b849; WORD $0x3fff // mov    r8, 4611686018427387888
	WORD $0x2149; BYTE $0xd0               // and    r8, rdx
	JE   LBB1_13
	LONG $0xf0708d49                       // lea    rsi, [r8 - 16]
	WORD $0x8948; BYTE $0xf0               // mov    rax, rsi
	LONG $0x04e8c148                       // shr    rax, 4
	LONG $0xe6ba0f48; BYTE $0x04           // bt    rsi, 4
	JB   LBB1_6
	LONG $0x0f107cc5                       // vmovups    ymm9, yword [rdi]
	LONG $0x67107cc5; BYTE $0x20           // vmovups    ymm12, yword [rdi + 32]
	LONG $0x5f107cc5; BYTE $0x40           // vmovups    ymm11, yword [rdi + 64]
	LONG $0x47107cc5; BYTE $0x60           // vmovups    ymm8, yword [rdi + 96]
	LONG $0x000010be; BYTE $0x00           // mov    esi, 16
	JMP  LBB1_8

LBB1_1:
	WORD $0xc031 // xor    eax, eax
	JMP  LBB1_14

LBB1_6:
	LONG $0x4d287cc5; BYTE $0x00 // vmovaps    ymm9, yword 0[rbp] /* [rip + .LCPI1_0] */
	WORD $0xf631                 // xor    esi, esi
	LONG $0x287c41c4; BYTE $0xe1 // vmovaps    ymm12, ymm9
	LONG $0x287c41c4; BYTE $0xd9 // vmovaps    ymm11, ymm9
	LONG $0x287c41c4; BYTE $0xc1 // vmovaps    ymm8, ymm9

LBB1_8:
	WORD $0x8548; BYTE $0xc0 // test    rax, rax
	JE   LBB1_11
	WORD $0x894c; BYTE $0xc0 // mov    rax, r8
	WORD $0x2948; BYTE $0xf0 // sub    rax, rsi
	QUAD $0x000000e0f7b48d48 // lea    rsi, [rdi + 8*rsi + 224]

LBB1_10:
	QUAD $0xffffff20a610fcc5                   // vmovups    ymm4, yword [rsi - 224]
	QUAD $0xffffff40ae10fcc5                   // vmovups    ymm5, yword [rsi - 192]
	QUAD $0xffffff60b610fcc5                   // vmovups    ymm6, yword [rsi - 160]
	LONG $0x7e10fcc5; BYTE $0x80               // vmovups    ymm7, yword [rsi - 128]
	LONG $0x197d63c4; WORD $0x01c8             // vextractf128    xmm0, ymm9, 1
	LONG $0x197de3c4; WORD $0x01e1             // vextractf128    xmm1, ymm4, 1
	LONG $0x3771e2c4; BYTE $0xc0               // vpcmpgtq    xmm0, xmm1, xmm0
	LONG $0x3759c2c4; BYTE $0xc9               // vpcmpgtq    xmm1, xmm4, xmm9
	LONG $0x187563c4; WORD $0x01d0             // vinsertf128    ymm10, ymm1, xmm0, 1
	LONG $0x197d63c4; WORD $0x01e1             // vextractf128    xmm1, ymm12, 1
	LONG $0x197de3c4; WORD $0x01e8             // vextractf128    xmm0, ymm5, 1
	LONG $0x3779e2c4; BYTE $0xc1               // vpcmpgtq    xmm0, xmm0, xmm1
	LONG $0x3751c2c4; BYTE $0xcc               // vpcmpgtq    xmm1, xmm5, xmm12
	LONG $0x1875e3c4; WORD $0x01c0             // vinsertf128    ymm0, ymm1, xmm0, 1
	LONG $0x197d63c4; WORD $0x01d9             // vextractf128    xmm1, ymm11, 1
	LONG $0x197de3c4; WORD $0x01f2             // vextractf128    xmm2, ymm6, 1
	LONG $0x3769e2c4; BYTE $0xc9               // vpcmpgtq    xmm1, xmm2, xmm1
	LONG $0x3749c2c4; BYTE $0xd3               // vpcmpgtq    xmm2, xmm6, xmm11
	LONG $0x186de3c4; WORD $0x01d1             // vinsertf128    ymm2, ymm2, xmm1, 1
	LONG $0x197d63c4; WORD $0x01c1             // vextractf128    xmm1, ymm8, 1
	LONG $0x197de3c4; WORD $0x01fb             // vextractf128    xmm3, ymm7, 1
	LONG $0x3761e2c4; BYTE $0xc9               // vpcmpgtq    xmm1, xmm3, xmm1
	LONG $0x3741c2c4; BYTE $0xd8               // vpcmpgtq    xmm3, xmm7, xmm8
	LONG $0x186563c4; WORD $0x01e9             // vinsertf128    ymm13, ymm3, xmm1, 1
	LONG $0x4b3563c4; WORD $0xa0cc             // vblendvpd    ymm9, ymm9, ymm4, ymm10
	LONG $0x4b1de3c4; WORD $0x00dd             // vblendvpd    ymm3, ymm12, ymm5, ymm0
	LONG $0x4b25e3c4; WORD $0x20d6             // vblendvpd    ymm2, ymm11, ymm6, ymm2
	LONG $0x4b3d63c4; WORD $0xd0c7             // vblendvpd    ymm8, ymm8, ymm7, ymm13
	LONG $0x6610fcc5; BYTE $0xa0               // vmovups    ymm4, yword [rsi - 96]
	LONG $0x6e10fcc5; BYTE $0xc0               // vmovups    ymm5, yword [rsi - 64]
	LONG $0x7610fcc5; BYTE $0xe0               // vmovups    ymm6, yword [rsi - 32]
	LONG $0x3e10fcc5                           // vmovups    ymm7, yword [rsi]
	LONG $0x197d63c4; WORD $0x01c8             // vextractf128    xmm0, ymm9, 1
	LONG $0x197de3c4; WORD $0x01e1             // vextractf128    xmm1, ymm4, 1
	LONG $0x3771e2c4; BYTE $0xc0               // vpcmpgtq    xmm0, xmm1, xmm0
	LONG $0x3759c2c4; BYTE $0xc9               // vpcmpgtq    xmm1, xmm4, xmm9
	LONG $0x187563c4; WORD $0x01d0             // vinsertf128    ymm10, ymm1, xmm0, 1
	LONG $0x197de3c4; WORD $0x01d9             // vextractf128    xmm1, ymm3, 1
	LONG $0x197de3c4; WORD $0x01e8             // vextractf128    xmm0, ymm5, 1
	LONG $0x3779e2c4; BYTE $0xc1               // vpcmpgtq    xmm0, xmm0, xmm1
	LONG $0x3751e2c4; BYTE $0xcb               // vpcmpgtq    xmm1, xmm5, xmm3
	LONG $0x187563c4; WORD $0x01d8             // vinsertf128    ymm11, ymm1, xmm0, 1
	LONG $0x197de3c4; WORD $0x01d1             // vextractf128    xmm1, ymm2, 1
	LONG $0x197de3c4; WORD $0x01f0             // vextractf128    xmm0, ymm6, 1
	LONG $0x3779e2c4; BYTE $0xc1               // vpcmpgtq    xmm0, xmm0, xmm1
	LONG $0x3749e2c4; BYTE $0xca               // vpcmpgtq    xmm1, xmm6, xmm2
	LONG $0x187563c4; WORD $0x01e8             // vinsertf128    ymm13, ymm1, xmm0, 1
	LONG $0x197d63c4; WORD $0x01c1             // vextractf128    xmm1, ymm8, 1
	LONG $0x197de3c4; WORD $0x01f8             // vextractf128    xmm0, ymm7, 1
	LONG $0x3779e2c4; BYTE $0xc1               // vpcmpgtq    xmm0, xmm0, xmm1
	LONG $0x3741c2c4; BYTE $0xc8               // vpcmpgtq    xmm1, xmm7, xmm8
	LONG $0x1875e3c4; WORD $0x01c0             // vinsertf128    ymm0, ymm1, xmm0, 1
	LONG $0x4b3563c4; WORD $0xa0cc             // vblendvpd    ymm9, ymm9, ymm4, ymm10
	LONG $0x4b6563c4; WORD $0xb0e5             // vblendvpd    ymm12, ymm3, ymm5, ymm11
	LONG $0x4b6d63c4; WORD $0xd0de             // vblendvpd    ymm11, ymm2, ymm6, ymm13
	LONG $0x4b3d63c4; WORD $0x00c7             // vblendvpd    ymm8, ymm8, ymm7, ymm0
	LONG $0x00c68148; WORD $0x0001; BYTE $0x00 // add    rsi, 256
	LONG $0xe0c08348                           // add    rax, -32
	JNE  LBB1_10

LBB1_11:
	LONG $0x197d63c4; WORD $0x01e0 // vextractf128    xmm0, ymm12, 1
	LONG $0x197d63c4; WORD $0x01c9 // vextractf128    xmm1, ymm9, 1
	LONG $0x3771e2c4; BYTE $0xc0   // vpcmpgtq    xmm0, xmm1, xmm0
	LONG $0x3731c2c4; BYTE $0xcc   // vpcmpgtq    xmm1, xmm9, xmm12
	LONG $0x1875e3c4; WORD $0x01c0 // vinsertf128    ymm0, ymm1, xmm0, 1
	LONG $0x4b1dc3c4; WORD $0x00c1 // vblendvpd    ymm0, ymm12, ymm9, ymm0
	LONG $0x197de3c4; WORD $0x01c1 // vextractf128    xmm1, ymm0, 1
	LONG $0x197d63c4; WORD $0x01da // vextractf128    xmm2, ymm11, 1
	LONG $0x3771e2c4; BYTE $0xca   // vpcmpgtq    xmm1, xmm1, xmm2
	LONG $0x3779c2c4; BYTE $0xd3   // vpcmpgtq    xmm2, xmm0, xmm11
	LONG $0x186de3c4; WORD $0x01c9 // vinsertf128    ymm1, ymm2, xmm1, 1
	LONG $0x4b25e3c4; WORD $0x10c0 // vblendvpd    ymm0, ymm11, ymm0, ymm1
	LONG $0x197de3c4; WORD $0x01c1 // vextractf128    xmm1, ymm0, 1
	LONG $0x197d63c4; WORD $0x01c2 // vextractf128    xmm2, ymm8, 1
	LONG $0x3771e2c4; BYTE $0xca   // vpcmpgtq    xmm1, xmm1, xmm2
	LONG $0x3779c2c4; BYTE $0xd0   // vpcmpgtq    xmm2, xmm0, xmm8
	LONG $0x186de3c4; WORD $0x01c9 // vinsertf128    ymm1, ymm2, xmm1, 1
	LONG $0x4b3de3c4; WORD $0x10c0 // vblendvpd    ymm0, ymm8, ymm0, ymm1
	LONG $0x197de3c4; WORD $0x01c1 // vextractf128    xmm1, ymm0, 1
	LONG $0x3779e2c4; BYTE $0xd1   // vpcmpgtq    xmm2, xmm0, xmm1
	LONG $0x3771e2c4; BYTE $0xd8   // vpcmpgtq    xmm3, xmm1, xmm0
	LONG $0x186de3c4; WORD $0x01d3 // vinsertf128    ymm2, ymm2, xmm3, 1
	LONG $0x4b75e3c4; WORD $0x20c0 // vblendvpd    ymm0, ymm1, ymm0, ymm2
	LONG $0xc870f9c5; BYTE $0x4e   // vpshufd    xmm1, xmm0, 78
	LONG $0x3779e2c4; BYTE $0xc9   // vpcmpgtq    xmm1, xmm0, xmm1
	LONG $0x197de3c4; WORD $0x01c2 // vextractf128    xmm2, ymm0, 1
	LONG $0x3769e2c4; BYTE $0xd0   // vpcmpgtq    xmm2, xmm2, xmm0
	LONG $0xca63f1c5               // vpacksswb    xmm1, xmm1, xmm2
	LONG $0x1479e3c4; WORD $0x00ce // vpextrb    esi, xmm1, 0
	LONG $0x7ef9c1c4; BYTE $0xc1   // vmovq    r9, xmm0
	LONG $0x16f9e3c4; WORD $0x01c0 // vpextrq    rax, xmm0, 1
	LONG $0x01c6f640               // test    sil, 1
	LONG $0xc1450f49               // cmovne    rax, r9
	WORD $0x394c; BYTE $0xc2       // cmp    rdx, r8
	JE   LBB1_14
	LONG $0xc73c8d4a               // lea    rdi, [rdi + 8*r8]

LBB1_13:
	WORD $0x8b48; BYTE $0x17 // mov    rdx, qword [rdi]
	WORD $0x3948; BYTE $0xc2 // cmp    rdx, rax
	LONG $0xc24d0f48         // cmovge    rax, rdx
	LONG $0x08c78348         // add    rdi, 8
	WORD $0x3948; BYTE $0xcf // cmp    rdi, rcx
	JB   LBB1_13

LBB1_14:
	VZEROUPPER
	MOVQ AX, ret+16(FP)
	RET

DATA LCDATA2<>+0x000(SB)/8, $0x7fffffffffffffff
DATA LCDATA2<>+0x008(SB)/8, $0x7fffffffffffffff
DATA LCDATA2<>+0x010(SB)/8, $0x7fffffffffffffff
DATA LCDATA2<>+0x018(SB)/8, $0x7fffffffffffffff
GLOBL LCDATA2<>(SB), 8, $32

TEXT ·_asm_min_avx(SB), $0-24

	MOVQ addr+0(FP), DI
	MOVQ len+8(FP), SI
	LEAQ LCDATA2<>(SB), BP

	WORD $0x8548; BYTE $0xf6               // test    rsi, rsi
	JE   LBB2_1
	QUAD $0xffffffffffffb848; WORD $0x7fff // mov    rax, 9223372036854775807
	JLE  LBB2_14
	LONG $0xf70c8d48                       // lea    rcx, [rdi + 8*rsi]
	LONG $0x08778d48                       // lea    rsi, [rdi + 8]
	WORD $0x3948; BYTE $0xf1               // cmp    rcx, rsi
	LONG $0xf1470f48                       // cmova    rsi, rcx
	WORD $0x8948; BYTE $0xfa               // mov    rdx, rdi
	WORD $0xf748; BYTE $0xd2               // not    rdx
	WORD $0x0148; BYTE $0xf2               // add    rdx, rsi
	LONG $0x03eac148                       // shr    rdx, 3
	WORD $0xff48; BYTE $0xc2               // inc    rdx
	LONG $0x10fa8348                       // cmp    rdx, 16
	JB   LBB2_13
	QUAD $0xfffffffffff0b849; WORD $0x3fff // mov    r8, 4611686018427387888
	WORD $0x2149; BYTE $0xd0               // and    r8, rdx
	JE   LBB2_13
	LONG $0xf0708d49                       // lea    rsi, [r8 - 16]
	WORD $0x8948; BYTE $0xf0               // mov    rax, rsi
	LONG $0x04e8c148                       // shr    rax, 4
	LONG $0xe6ba0f48; BYTE $0x04           // bt    rsi, 4
	JB   LBB2_6
	LONG $0x0f107cc5                       // vmovups    ymm9, yword [rdi]
	LONG $0x67107cc5; BYTE $0x20           // vmovups    ymm12, yword [rdi + 32]
	LONG $0x5f107cc5; BYTE $0x40           // vmovups    ymm11, yword [rdi + 64]
	LONG $0x47107cc5; BYTE $0x60           // vmovups    ymm8, yword [rdi + 96]
	LONG $0x000010be; BYTE $0x00           // mov    esi, 16
	JMP  LBB2_8

LBB2_1:
	WORD $0xc031 // xor    eax, eax
	JMP  LBB2_14

LBB2_6:
	LONG $0x4d287cc5; BYTE $0x00 // vmovaps    ymm9, yword 0[rbp] /* [rip + .LCPI2_0] */
	WORD $0xf631                 // xor    esi, esi
	LONG $0x287c41c4; BYTE $0xe1 // vmovaps    ymm12, ymm9
	LONG $0x287c41c4; BYTE $0xd9 // vmovaps    ymm11, ymm9
	LONG $0x287c41c4; BYTE $0xc1 // vmovaps    ymm8, ymm9

LBB2_8:
	WORD $0x8548; BYTE $0xc0 // test    rax, rax
	JE   LBB2_11
	WORD $0x894c; BYTE $0xc0 // mov    rax, r8
	WORD $0x2948; BYTE $0xf0 // sub    rax, rsi
	QUAD $0x000000e0f7b48d48 // lea    rsi, [rdi + 8*rsi + 224]

LBB2_10:
	QUAD $0xffffff20a610fcc5                   // vmovups    ymm4, yword [rsi - 224]
	QUAD $0xffffff40ae10fcc5                   // vmovups    ymm5, yword [rsi - 192]
	QUAD $0xffffff60b610fcc5                   // vmovups    ymm6, yword [rsi - 160]
	LONG $0x7e10fcc5; BYTE $0x80               // vmovups    ymm7, yword [rsi - 128]
	LONG $0x197d63c4; WORD $0x01c8             // vextractf128    xmm0, ymm9, 1
	LONG $0x197de3c4; WORD $0x01e1             // vextractf128    xmm1, ymm4, 1
	LONG $0x3779e2c4; BYTE $0xc1               // vpcmpgtq    xmm0, xmm0, xmm1
	LONG $0x3731e2c4; BYTE $0xcc               // vpcmpgtq    xmm1, xmm9, xmm4
	LONG $0x187563c4; WORD $0x01d0             // vinsertf128    ymm10, ymm1, xmm0, 1
	LONG $0x197d63c4; WORD $0x01e1             // vextractf128    xmm1, ymm12, 1
	LONG $0x197de3c4; WORD $0x01e8             // vextractf128    xmm0, ymm5, 1
	LONG $0x3771e2c4; BYTE $0xc0               // vpcmpgtq    xmm0, xmm1, xmm0
	LONG $0x3719e2c4; BYTE $0xcd               // vpcmpgtq    xmm1, xmm12, xmm5
	LONG $0x1875e3c4; WORD $0x01c0             // vinsertf128    ymm0, ymm1, xmm0, 1
	LONG $0x197d63c4; WORD $0x01d9             // vextractf128    xmm1, ymm11, 1
	LONG $0x197de3c4; WORD $0x01f2             // vextractf128    xmm2, ymm6, 1
	LONG $0x3771e2c4; BYTE $0xca               // vpcmpgtq    xmm1, xmm1, xmm2
	LONG $0x3721e2c4; BYTE $0xd6               // vpcmpgtq    xmm2, xmm11, xmm6
	LONG $0x186de3c4; WORD $0x01d1             // vinsertf128    ymm2, ymm2, xmm1, 1
	LONG $0x197d63c4; WORD $0x01c1             // vextractf128    xmm1, ymm8, 1
	LONG $0x197de3c4; WORD $0x01fb             // vextractf128    xmm3, ymm7, 1
	LONG $0x3771e2c4; BYTE $0xcb               // vpcmpgtq    xmm1, xmm1, xmm3
	LONG $0x3739e2c4; BYTE $0xdf               // vpcmpgtq    xmm3, xmm8, xmm7
	LONG $0x186563c4; WORD $0x01e9             // vinsertf128    ymm13, ymm3, xmm1, 1
	LONG $0x4b3563c4; WORD $0xa0cc             // vblendvpd    ymm9, ymm9, ymm4, ymm10
	LONG $0x4b1de3c4; WORD $0x00dd             // vblendvpd    ymm3, ymm12, ymm5, ymm0
	LONG $0x4b25e3c4; WORD $0x20d6             // vblendvpd    ymm2, ymm11, ymm6, ymm2
	LONG $0x4b3d63c4; WORD $0xd0c7             // vblendvpd    ymm8, ymm8, ymm7, ymm13
	LONG $0x6610fcc5; BYTE $0xa0               // vmovups    ymm4, yword [rsi - 96]
	LONG $0x6e10fcc5; BYTE $0xc0               // vmovups    ymm5, yword [rsi - 64]
	LONG $0x7610fcc5; BYTE $0xe0               // vmovups    ymm6, yword [rsi - 32]
	LONG $0x3e10fcc5                           // vmovups    ymm7, yword [rsi]
	LONG $0x197d63c4; WORD $0x01c8             // vextractf128    xmm0, ymm9, 1
	LONG $0x197de3c4; WORD $0x01e1             // vextractf128    xmm1, ymm4, 1
	LONG $0x3779e2c4; BYTE $0xc1               // vpcmpgtq    xmm0, xmm0, xmm1
	LONG $0x3731e2c4; BYTE $0xcc               // vpcmpgtq    xmm1, xmm9, xmm4
	LONG $0x187563c4; WORD $0x01d0             // vinsertf128    ymm10, ymm1, xmm0, 1
	LONG $0x197de3c4; WORD $0x01d9             // vextractf128    xmm1, ymm3, 1
	LONG $0x197de3c4; WORD $0x01e8             // vextractf128    xmm0, ymm5, 1
	LONG $0x3771e2c4; BYTE $0xc0               // vpcmpgtq    xmm0, xmm1, xmm0
	LONG $0x3761e2c4; BYTE $0xcd               // vpcmpgtq    xmm1, xmm3, xmm5
	LONG $0x187563c4; WORD $0x01d8             // vinsertf128    ymm11, ymm1, xmm0, 1
	LONG $0x197de3c4; WORD $0x01d1             // vextractf128    xmm1, ymm2, 1
	LONG $0x197de3c4; WORD $0x01f0             // vextractf128    xmm0, ymm6, 1
	LONG $0x3771e2c4; BYTE $0xc0               // vpcmpgtq    xmm0, xmm1, xmm0
	LONG $0x3769e2c4; BYTE $0xce               // vpcmpgtq    xmm1, xmm2, xmm6
	LONG $0x187563c4; WORD $0x01e8             // vinsertf128    ymm13, ymm1, xmm0, 1
	LONG $0x197d63c4; WORD $0x01c1             // vextractf128    xmm1, ymm8, 1
	LONG $0x197de3c4; WORD $0x01f8             // vextractf128    xmm0, ymm7, 1
	LONG $0x3771e2c4; BYTE $0xc0               // vpcmpgtq    xmm0, xmm1, xmm0
	LONG $0x3739e2c4; BYTE $0xcf               // vpcmpgtq    xmm1, xmm8, xmm7
	LONG $0x1875e3c4; WORD $0x01c0             // vinsertf128    ymm0, ymm1, xmm0, 1
	LONG $0x4b3563c4; WORD $0xa0cc             // vblendvpd    ymm9, ymm9, ymm4, ymm10
	LONG $0x4b6563c4; WORD $0xb0e5             // vblendvpd    ymm12, ymm3, ymm5, ymm11
	LONG $0x4b6d63c4; WORD $0xd0de             // vblendvpd    ymm11, ymm2, ymm6, ymm13
	LONG $0x4b3d63c4; WORD $0x00c7             // vblendvpd    ymm8, ymm8, ymm7, ymm0
	LONG $0x00c68148; WORD $0x0001; BYTE $0x00 // add    rsi, 256
	LONG $0xe0c08348                           // add    rax, -32
	JNE  LBB2_10

LBB2_11:
	LONG $0x197d63c4; WORD $0x01c8 // vextractf128    xmm0, ymm9, 1
	LONG $0x197d63c4; WORD $0x01e1 // vextractf128    xmm1, ymm12, 1
	LONG $0x3771e2c4; BYTE $0xc0   // vpcmpgtq    xmm0, xmm1, xmm0
	LONG $0x3719c2c4; BYTE $0xc9   // vpcmpgtq    xmm1, xmm12, xmm9
	LONG $0x1875e3c4; WORD $0x01c0 // vinsertf128    ymm0, ymm1, xmm0, 1
	LONG $0x4b1dc3c4; WORD $0x00c1 // vblendvpd    ymm0, ymm12, ymm9, ymm0
	LONG $0x197de3c4; WORD $0x01c1 // vextractf128    xmm1, ymm0, 1
	LONG $0x197d63c4; WORD $0x01da // vextractf128    xmm2, ymm11, 1
	LONG $0x3769e2c4; BYTE $0xc9   // vpcmpgtq    xmm1, xmm2, xmm1
	LONG $0x3721e2c4; BYTE $0xd0   // vpcmpgtq    xmm2, xmm11, xmm0
	LONG $0x186de3c4; WORD $0x01c9 // vinsertf128    ymm1, ymm2, xmm1, 1
	LONG $0x4b25e3c4; WORD $0x10c0 // vblendvpd    ymm0, ymm11, ymm0, ymm1
	LONG $0x197de3c4; WORD $0x01c1 // vextractf128    xmm1, ymm0, 1
	LONG $0x197d63c4; WORD $0x01c2 // vextractf128    xmm2, ymm8, 1
	LONG $0x3769e2c4; BYTE $0xc9   // vpcmpgtq    xmm1, xmm2, xmm1
	LONG $0x3739e2c4; BYTE $0xd0   // vpcmpgtq    xmm2, xmm8, xmm0
	LONG $0x186de3c4; WORD $0x01c9 // vinsertf128    ymm1, ymm2, xmm1, 1
	LONG $0x4b3de3c4; WORD $0x10c0 // vblendvpd    ymm0, ymm8, ymm0, ymm1
	LONG $0x197de3c4; WORD $0x01c1 // vextractf128    xmm1, ymm0, 1
	LONG $0x3771e2c4; BYTE $0xd0   // vpcmpgtq    xmm2, xmm1, xmm0
	LONG $0x3779e2c4; BYTE $0xd9   // vpcmpgtq    xmm3, xmm0, xmm1
	LONG $0x186de3c4; WORD $0x01d3 // vinsertf128    ymm2, ymm2, xmm3, 1
	LONG $0x4b75e3c4; WORD $0x20c0 // vblendvpd    ymm0, ymm1, ymm0, ymm2
	LONG $0xc870f9c5; BYTE $0x4e   // vpshufd    xmm1, xmm0, 78
	LONG $0x3771e2c4; BYTE $0xc8   // vpcmpgtq    xmm1, xmm1, xmm0
	LONG $0x197de3c4; WORD $0x01c2 // vextractf128    xmm2, ymm0, 1
	LONG $0x3779e2c4; BYTE $0xd2   // vpcmpgtq    xmm2, xmm0, xmm2
	LONG $0xca63f1c5               // vpacksswb    xmm1, xmm1, xmm2
	LONG $0x1479e3c4; WORD $0x00ce // vpextrb    esi, xmm1, 0
	LONG $0x7ef9c1c4; BYTE $0xc1   // vmovq    r9, xmm0
	LONG $0x16f9e3c4; WORD $0x01c0 // vpextrq    rax, xmm0, 1
	LONG $0x01c6f640               // test    sil, 1
	LONG $0xc1450f49               // cmovne    rax, r9
	WORD $0x394c; BYTE $0xc2       // cmp    rdx, r8
	JE   LBB2_14
	LONG $0xc73c8d4a               // lea    rdi, [rdi + 8*r8]

LBB2_13:
	WORD $0x8b48; BYTE $0x17 // mov    rdx, qword [rdi]
	WORD $0x3948; BYTE $0xc2 // cmp    rdx, rax
	LONG $0xc24e0f48         // cmovle    rax, rdx
	LONG $0x08c78348         // add    rdi, 8
	WORD $0x3948; BYTE $0xcf // cmp    rdi, rcx
	JB   LBB2_13

LBB2_14:
	VZEROUPPER
	MOVQ AX, ret+16(FP)
	RET

TEXT ·_asm_multi_avx(SB), $0-24

	MOVQ addr+0(FP), DI
	MOVQ addr1+8(FP), SI
	MOVQ len+16(FP), DX

	WORD $0x8548; BYTE $0xd2 // test    rdx, rdx
	JLE  LBB3_6
	LONG $0xd7048d48         // lea    rax, [rdi + 8*rdx]
	LONG $0x08578d48         // lea    rdx, [rdi + 8]
	WORD $0x3948; BYTE $0xd0 // cmp    rax, rdx
	LONG $0xd0470f48         // cmova    rdx, rax
	WORD $0x8949; BYTE $0xf8 // mov    r8, rdi
	WORD $0xf749; BYTE $0xd0 // not    r8
	WORD $0x0149; BYTE $0xd0 // add    r8, rdx
	WORD $0x8944; BYTE $0xc2 // mov    edx, r8d
	WORD $0xeac1; BYTE $0x03 // shr    edx, 3
	WORD $0xc2ff             // inc    edx
	LONG $0x03e28348         // and    rdx, 3
	JE   LBB3_4
	WORD $0xf748; BYTE $0xda // neg    rdx

LBB3_3:
	WORD $0x8b48; BYTE $0x0f // mov    rcx, qword [rdi]
	LONG $0x0eaf0f48         // imul    rcx, qword [rsi]
	LONG $0x08c68348         // add    rsi, 8
	WORD $0x8948; BYTE $0x0f // mov    qword [rdi], rcx
	LONG $0x087f8d48         // lea    rdi, [rdi + 8]
	WORD $0xff48; BYTE $0xc2 // inc    rdx
	JNE  LBB3_3

LBB3_4:
	LONG $0x18f88349 // cmp    r8, 24
	JB   LBB3_6

LBB3_5:
	WORD $0x8b48; BYTE $0x0f     // mov    rcx, qword [rdi]
	LONG $0x0eaf0f48             // imul    rcx, qword [rsi]
	WORD $0x8948; BYTE $0x0f     // mov    qword [rdi], rcx
	LONG $0x084f8b48             // mov    rcx, qword [rdi + 8]
	LONG $0x4eaf0f48; BYTE $0x08 // imul    rcx, qword [rsi + 8]
	LONG $0x084f8948             // mov    qword [rdi + 8], rcx
	LONG $0x104f8b48             // mov    rcx, qword [rdi + 16]
	LONG $0x4eaf0f48; BYTE $0x10 // imul    rcx, qword [rsi + 16]
	LONG $0x104f8948             // mov    qword [rdi + 16], rcx
	LONG $0x184f8b48             // mov    rcx, qword [rdi + 24]
	LONG $0x4eaf0f48; BYTE $0x18 // imul    rcx, qword [rsi + 24]
	LONG $0x184f8948             // mov    qword [rdi + 24], rcx
	LONG $0x20c78348             // add    rdi, 32
	LONG $0x20c68348             // add    rsi, 32
	WORD $0x3948; BYTE $0xc7     // cmp    rdi, rax
	JB   LBB3_5

LBB3_6:
	RET

TEXT ·_asm_and_avx(SB), $0-24

	MOVQ addr+0(FP), DI
	MOVQ addr1+8(FP), SI
	MOVQ len+16(FP), DX

	WORD $0x8548; BYTE $0xd2               // test    rdx, rdx
	JLE  LBB4_14
	LONG $0xd7048d4c                       // lea    r8, [rdi + 8*rdx]
	LONG $0x084f8d48                       // lea    rcx, [rdi + 8]
	WORD $0x3949; BYTE $0xc8               // cmp    r8, rcx
	WORD $0x8949; BYTE $0xca               // mov    r10, rcx
	LONG $0xd0470f4d                       // cmova    r10, r8
	WORD $0x8948; BYTE $0xf8               // mov    rax, rdi
	WORD $0xf748; BYTE $0xd0               // not    rax
	WORD $0x0149; BYTE $0xc2               // add    r10, rax
	LONG $0x03eac149                       // shr    r10, 3
	WORD $0xff49; BYTE $0xc2               // inc    r10
	LONG $0x10fa8349                       // cmp    r10, 16
	JB   LBB4_2
	QUAD $0xfffffffffff0b949; WORD $0x3fff // mov    r9, 4611686018427387888
	WORD $0x214d; BYTE $0xd1               // and    r9, r10
	JE   LBB4_2
	WORD $0x3949; BYTE $0xc8               // cmp    r8, rcx
	LONG $0xc8470f49                       // cmova    rcx, r8
	WORD $0x0148; BYTE $0xc1               // add    rcx, rax
	LONG $0xf8e18348                       // and    rcx, -8
	LONG $0x0e448d48; BYTE $0x08           // lea    rax, [rsi + rcx + 8]
	WORD $0x3948; BYTE $0xf8               // cmp    rax, rdi
	JBE  LBB4_6
	LONG $0x0f448d48; BYTE $0x08           // lea    rax, [rdi + rcx + 8]
	WORD $0x3948; BYTE $0xf0               // cmp    rax, rsi
	JBE  LBB4_6

LBB4_2:
	WORD $0x8948; BYTE $0xf9 // mov    rcx, rdi
	WORD $0x8948; BYTE $0xf2 // mov    rdx, rsi

LBB4_9:
	LONG $0x08718d48         // lea    rsi, [rcx + 8]
	WORD $0x3949; BYTE $0xf0 // cmp    r8, rsi
	LONG $0xf0470f49         // cmova    rsi, r8
	WORD $0x8948; BYTE $0xc8 // mov    rax, rcx
	WORD $0xf748; BYTE $0xd0 // not    rax
	WORD $0x0148; BYTE $0xf0 // add    rax, rsi
	WORD $0xc689             // mov    esi, eax
	WORD $0xeec1; BYTE $0x03 // shr    esi, 3
	WORD $0xc6ff             // inc    esi
	LONG $0x03e68348         // and    rsi, 3
	JE   LBB4_12
	WORD $0xf748; BYTE $0xde // neg    rsi

LBB4_11:
	WORD $0x8b48; BYTE $0x3a // mov    rdi, qword [rdx]
	LONG $0x08c28348         // add    rdx, 8
	WORD $0x2148; BYTE $0x39 // and    qword [rcx], rdi
	LONG $0x08c18348         // add    rcx, 8
	WORD $0xff48; BYTE $0xc6 // inc    rsi
	JNE  LBB4_11

LBB4_12:
	LONG $0x18f88348 // cmp    rax, 24
	JB   LBB4_14

LBB4_13:
	WORD $0x8b48; BYTE $0x02 // mov    rax, qword [rdx]
	WORD $0x2148; BYTE $0x01 // and    qword [rcx], rax
	LONG $0x08428b48         // mov    rax, qword [rdx + 8]
	LONG $0x08412148         // and    qword [rcx + 8], rax
	LONG $0x10428b48         // mov    rax, qword [rdx + 16]
	LONG $0x10412148         // and    qword [rcx + 16], rax
	LONG $0x18428b48         // mov    rax, qword [rdx + 24]
	LONG $0x18412148         // and    qword [rcx + 24], rax
	LONG $0x20c18348         // add    rcx, 32
	LONG $0x20c28348         // add    rdx, 32
	WORD $0x394c; BYTE $0xc1 // cmp    rcx, r8
	JB   LBB4_13

LBB4_14:
	VZEROUPPER
	RET

LBB4_6:
	LONG $0xcf0c8d4a         // lea    rcx, [rdi + 8*r9]
	LONG $0xce148d4a         // lea    rdx, [rsi + 8*r9]
	LONG $0x60c68348         // add    rsi, 96
	LONG $0x60c78348         // add    rdi, 96
	WORD $0x894c; BYTE $0xc8 // mov    rax, r9

LBB4_7:
	LONG $0x4710fcc5; BYTE $0xa0 // vmovups    ymm0, yword [rdi - 96]
	LONG $0x4f10fcc5; BYTE $0xc0 // vmovups    ymm1, yword [rdi - 64]
	LONG $0x5710fcc5; BYTE $0xe0 // vmovups    ymm2, yword [rdi - 32]
	LONG $0x1f10fcc5             // vmovups    ymm3, yword [rdi]
	LONG $0x4654fcc5; BYTE $0xa0 // vandps    ymm0, ymm0, yword [rsi - 96]
	LONG $0x4e54f4c5; BYTE $0xc0 // vandps    ymm1, ymm1, yword [rsi - 64]
	LONG $0x5654ecc5; BYTE $0xe0 // vandps    ymm2, ymm2, yword [rsi - 32]
	LONG $0x1e54e4c5             // vandps    ymm3, ymm3, yword [rsi]
	LONG $0x4711fcc5; BYTE $0xa0 // vmovups    yword [rdi - 96], ymm0
	LONG $0x4f11fcc5; BYTE $0xc0 // vmovups    yword [rdi - 64], ymm1
	LONG $0x5711fcc5; BYTE $0xe0 // vmovups    yword [rdi - 32], ymm2
	LONG $0x1f11fcc5             // vmovups    yword [rdi], ymm3
	LONG $0x80ee8348             // sub    rsi, -128
	LONG $0x80ef8348             // sub    rdi, -128
	LONG $0xf0c08348             // add    rax, -16
	JNE  LBB4_7
	WORD $0x394d; BYTE $0xca     // cmp    r10, r9
	JNE  LBB4_9
	JMP  LBB4_14

TEXT ·_asm_and2_avx(SB), $0-32

	MOVQ addr+0(FP), DI
	MOVQ addr1+8(FP), SI
	MOVQ addr2+16(FP), DX
	MOVQ len+24(FP), CX

	WORD $0x8548; BYTE $0xc9               // test    rcx, rcx
	JLE  LBB5_14
	LONG $0xcf048d4c                       // lea    r8, [rdi + 8*rcx]
	LONG $0x08478d48                       // lea    rax, [rdi + 8]
	WORD $0x3949; BYTE $0xc0               // cmp    r8, rax
	WORD $0x8949; BYTE $0xc2               // mov    r10, rax
	LONG $0xd0470f4d                       // cmova    r10, r8
	WORD $0x8948; BYTE $0xf9               // mov    rcx, rdi
	WORD $0xf748; BYTE $0xd1               // not    rcx
	WORD $0x0149; BYTE $0xca               // add    r10, rcx
	LONG $0x03eac149                       // shr    r10, 3
	WORD $0xff49; BYTE $0xc2               // inc    r10
	LONG $0x10fa8349                       // cmp    r10, 16
	JB   LBB5_2
	QUAD $0xfffffffffff0bb49; WORD $0x3fff // mov    r11, 4611686018427387888
	WORD $0x214d; BYTE $0xd3               // and    r11, r10
	JE   LBB5_2
	WORD $0x3949; BYTE $0xc0               // cmp    r8, rax
	LONG $0xc0470f49                       // cmova    rax, r8
	WORD $0x0148; BYTE $0xc8               // add    rax, rcx
	LONG $0xf8e08348                       // and    rax, -8
	LONG $0x074c8d48; BYTE $0x08           // lea    rcx, [rdi + rax + 8]
	LONG $0x065c8d48; BYTE $0x08           // lea    rbx, [rsi + rax + 8]
	LONG $0x024c8d4c; BYTE $0x08           // lea    r9, [rdx + rax + 8]
	WORD $0x3948; BYTE $0xdf               // cmp    rdi, rbx
	WORD $0xc018                           // sbb    al, al
	WORD $0x3948; BYTE $0xce               // cmp    rsi, rcx
	WORD $0xdb18                           // sbb    bl, bl
	WORD $0xc320                           // and    bl, al
	WORD $0x394c; BYTE $0xcf               // cmp    rdi, r9
	WORD $0xc018                           // sbb    al, al
	WORD $0x3948; BYTE $0xca               // cmp    rdx, rcx
	WORD $0xc918                           // sbb    cl, cl
	WORD $0xc3f6; BYTE $0x01               // test    bl, 1
	JNE  LBB5_2
	WORD $0xc820                           // and    al, cl
	WORD $0x0124                           // and    al, 1
	JNE  LBB5_2
	LONG $0xdf0c8d4a                       // lea    rcx, [rdi + 8*r11]
	LONG $0xde0c8d4e                       // lea    r9, [rsi + 8*r11]
	LONG $0xda048d4a                       // lea    rax, [rdx + 8*r11]
	LONG $0x60c28348                       // add    rdx, 96
	LONG $0x60c68348                       // add    rsi, 96
	LONG $0x60c78348                       // add    rdi, 96
	WORD $0x894c; BYTE $0xdb               // mov    rbx, r11

LBB5_7:
	LONG $0x4210fcc5; BYTE $0xa0 // vmovups    ymm0, yword [rdx - 96]
	LONG $0x4a10fcc5; BYTE $0xc0 // vmovups    ymm1, yword [rdx - 64]
	LONG $0x5210fcc5; BYTE $0xe0 // vmovups    ymm2, yword [rdx - 32]
	LONG $0x1a10fcc5             // vmovups    ymm3, yword [rdx]
	LONG $0x4654fcc5; BYTE $0xa0 // vandps    ymm0, ymm0, yword [rsi - 96]
	LONG $0x4e54f4c5; BYTE $0xc0 // vandps    ymm1, ymm1, yword [rsi - 64]
	LONG $0x5654ecc5; BYTE $0xe0 // vandps    ymm2, ymm2, yword [rsi - 32]
	LONG $0x1e54e4c5             // vandps    ymm3, ymm3, yword [rsi]
	LONG $0x4754fcc5; BYTE $0xa0 // vandps    ymm0, ymm0, yword [rdi - 96]
	LONG $0x4f54f4c5; BYTE $0xc0 // vandps    ymm1, ymm1, yword [rdi - 64]
	LONG $0x5754ecc5; BYTE $0xe0 // vandps    ymm2, ymm2, yword [rdi - 32]
	LONG $0x1f54e4c5             // vandps    ymm3, ymm3, yword [rdi]
	LONG $0x4711fcc5; BYTE $0xa0 // vmovups    yword [rdi - 96], ymm0
	LONG $0x4f11fcc5; BYTE $0xc0 // vmovups    yword [rdi - 64], ymm1
	LONG $0x5711fcc5; BYTE $0xe0 // vmovups    yword [rdi - 32], ymm2
	LONG $0x1f11fcc5             // vmovups    yword [rdi], ymm3
	LONG $0x80ea8348             // sub    rdx, -128
	LONG $0x80ee8348             // sub    rsi, -128
	LONG $0x80ef8348             // sub    rdi, -128
	LONG $0xf0c38348             // add    rbx, -16
	JNE  LBB5_7
	WORD $0x394d; BYTE $0xda     // cmp    r10, r11
	JNE  LBB5_9
	JMP  LBB5_14

LBB5_2:
	WORD $0x8948; BYTE $0xf9 // mov    rcx, rdi
	WORD $0x8949; BYTE $0xf1 // mov    r9, rsi
	WORD $0x8948; BYTE $0xd0 // mov    rax, rdx

LBB5_9:
	LONG $0x08718d48         // lea    rsi, [rcx + 8]
	WORD $0x3949; BYTE $0xf0 // cmp    r8, rsi
	LONG $0xf0470f49         // cmova    rsi, r8
	WORD $0x8948; BYTE $0xca // mov    rdx, rcx
	WORD $0xf748; BYTE $0xd2 // not    rdx
	WORD $0x0148; BYTE $0xf2 // add    rdx, rsi
	WORD $0xd689             // mov    esi, edx
	WORD $0xeec1; BYTE $0x03 // shr    esi, 3
	WORD $0xc6ff             // inc    esi
	LONG $0x03e68348         // and    rsi, 3
	JE   LBB5_12
	WORD $0xf748; BYTE $0xde // neg    rsi

LBB5_11:
	WORD $0x8b48; BYTE $0x38 // mov    rdi, qword [rax]
	LONG $0x08c08348         // add    rax, 8
	WORD $0x2349; BYTE $0x39 // and    rdi, qword [r9]
	LONG $0x08c18349         // add    r9, 8
	WORD $0x2148; BYTE $0x39 // and    qword [rcx], rdi
	LONG $0x08c18348         // add    rcx, 8
	WORD $0xff48; BYTE $0xc6 // inc    rsi
	JNE  LBB5_11

LBB5_12:
	LONG $0x18fa8348 // cmp    rdx, 24
	JB   LBB5_14

LBB5_13:
	WORD $0x8b48; BYTE $0x10 // mov    rdx, qword [rax]
	WORD $0x2349; BYTE $0x11 // and    rdx, qword [r9]
	WORD $0x2148; BYTE $0x11 // and    qword [rcx], rdx
	LONG $0x08508b48         // mov    rdx, qword [rax + 8]
	LONG $0x08512349         // and    rdx, qword [r9 + 8]
	LONG $0x08512148         // and    qword [rcx + 8], rdx
	LONG $0x10508b48         // mov    rdx, qword [rax + 16]
	LONG $0x10512349         // and    rdx, qword [r9 + 16]
	LONG $0x10512148         // and    qword [rcx + 16], rdx
	LONG $0x18508b48         // mov    rdx, qword [rax + 24]
	LONG $0x18512349         // and    rdx, qword [r9 + 24]
	LONG $0x18512148         // and    qword [rcx + 24], rdx
	LONG $0x20c18348         // add    rcx, 32
	LONG $0x20c18349         // add    r9, 32
	LONG $0x20c08348         // add    rax, 32
	WORD $0x394c; BYTE $0xc1 // cmp    rcx, r8
	JB   LBB5_13

LBB5_14:
	VZEROUPPER
	RET

TEXT ·_asm_and4_avx(SB), $32-48

	MOVQ addr+0(FP), DI
	MOVQ addr1+8(FP), SI
	MOVQ addr2+16(FP), DX
	MOVQ addr3+24(FP), CX
	MOVQ addr4+32(FP), R8
	MOVQ len+40(FP), R9
	ADDQ $8, SP

	WORD $0x854d; BYTE $0xc9               // test    r9, r9
	JLE  LBB6_16
	LONG $0xcf0c8d4e                       // lea    r9, [rdi + 8*r9]
	LONG $0x08478d48                       // lea    rax, [rdi + 8]
	WORD $0x3949; BYTE $0xc1               // cmp    r9, rax
	WORD $0x8949; BYTE $0xc7               // mov    r15, rax
	LONG $0xf9470f4d                       // cmova    r15, r9
	WORD $0x8948; BYTE $0xfb               // mov    rbx, rdi
	WORD $0xf748; BYTE $0xd3               // not    rbx
	WORD $0x0149; BYTE $0xdf               // add    r15, rbx
	LONG $0x03efc149                       // shr    r15, 3
	WORD $0xff49; BYTE $0xc7               // inc    r15
	LONG $0x10ff8349                       // cmp    r15, 16
	JB   LBB6_2
	QUAD $0xfffffffffff0ba49; WORD $0x3fff // mov    r10, 4611686018427387888
	WORD $0x214d; BYTE $0xfa               // and    r10, r15
	JE   LBB6_2
	LONG $0x2454894c; BYTE $0x08           // mov    qword [rsp + 8], r10
	WORD $0x3949; BYTE $0xc1               // cmp    r9, rax
	LONG $0xc1470f49                       // cmova    rax, r9
	WORD $0x0148; BYTE $0xd8               // add    rax, rbx
	LONG $0xf8e08348                       // and    rax, -8
	LONG $0x07648d4c; BYTE $0x08           // lea    r12, [rdi + rax + 8]
	LONG $0x06548d4c; BYTE $0x08           // lea    r10, [rsi + rax + 8]
	LONG $0x025c8d4c; BYTE $0x08           // lea    r11, [rdx + rax + 8]
	LONG $0x01748d4c; BYTE $0x08           // lea    r14, [rcx + rax + 8]
	LONG $0x00448d49; BYTE $0x08           // lea    rax, [r8 + rax + 8]
	LONG $0x24448948; BYTE $0x10           // mov    qword [rsp + 16], rax
	WORD $0x394c; BYTE $0xd7               // cmp    rdi, r10
	WORD $0xc018                           // sbb    al, al
	WORD $0x394c; BYTE $0xe6               // cmp    rsi, r12
	WORD $0x1845; BYTE $0xed               // sbb    r13b, r13b
	WORD $0x2041; BYTE $0xc5               // and    r13b, al
	WORD $0x394c; BYTE $0xdf               // cmp    rdi, r11
	WORD $0xc018                           // sbb    al, al
	WORD $0x394c; BYTE $0xe2               // cmp    rdx, r12
	WORD $0xdb18                           // sbb    bl, bl
	LONG $0x07245c88                       // mov    byte [rsp + 7], bl
	WORD $0x394c; BYTE $0xf7               // cmp    rdi, r14
	WORD $0x1845; BYTE $0xdb               // sbb    r11b, r11b
	WORD $0x394c; BYTE $0xe1               // cmp    rcx, r12
	WORD $0x1845; BYTE $0xf6               // sbb    r14b, r14b
	LONG $0x247c3b48; BYTE $0x10           // cmp    rdi, qword [rsp + 16]
	WORD $0x1845; BYTE $0xd2               // sbb    r10b, r10b
	WORD $0x394d; BYTE $0xe0               // cmp    r8, r12
	WORD $0xdb18                           // sbb    bl, bl
	LONG $0x01c5f641                       // test    r13b, 1
	JNE  LBB6_2
	LONG $0x07244422                       // and    al, byte [rsp + 7]
	WORD $0x0124                           // and    al, 1
	JNE  LBB6_2
	WORD $0x2045; BYTE $0xf3               // and    r11b, r14b
	LONG $0x01e38041                       // and    r11b, 1
	JNE  LBB6_2
	WORD $0x2041; BYTE $0xda               // and    r10b, bl
	LONG $0x01e28041                       // and    r10b, 1
	JNE  LBB6_2
	LONG $0x24648b4c; BYTE $0x08           // mov    r12, qword [rsp + 8]
	LONG $0xe7348d4e                       // lea    r14, [rdi + 8*r12]
	LONG $0xe6148d4e                       // lea    r10, [rsi + 8*r12]
	LONG $0xe01c8d4f                       // lea    r11, [r8 + 8*r12]
	LONG $0xe1048d4a                       // lea    rax, [rcx + 8*r12]
	LONG $0xe21c8d4a                       // lea    rbx, [rdx + 8*r12]
	LONG $0x60c28348                       // add    rdx, 96
	LONG $0x60c18348                       // add    rcx, 96
	LONG $0x60c08349                       // add    r8, 96
	LONG $0x60c68348                       // add    rsi, 96
	LONG $0x60c78348                       // add    rdi, 96
	WORD $0x894d; BYTE $0xe5               // mov    r13, r12

LBB6_9:
	LONG $0x4210fcc5; BYTE $0xa0   // vmovups    ymm0, yword [rdx - 96]
	LONG $0x4a10fcc5; BYTE $0xc0   // vmovups    ymm1, yword [rdx - 64]
	LONG $0x5210fcc5; BYTE $0xe0   // vmovups    ymm2, yword [rdx - 32]
	LONG $0x1a10fcc5               // vmovups    ymm3, yword [rdx]
	LONG $0x4654fcc5; BYTE $0xa0   // vandps    ymm0, ymm0, yword [rsi - 96]
	LONG $0x4e54f4c5; BYTE $0xc0   // vandps    ymm1, ymm1, yword [rsi - 64]
	LONG $0x5654ecc5; BYTE $0xe0   // vandps    ymm2, ymm2, yword [rsi - 32]
	LONG $0x1e54e4c5               // vandps    ymm3, ymm3, yword [rsi]
	LONG $0x4154fcc5; BYTE $0xa0   // vandps    ymm0, ymm0, yword [rcx - 96]
	LONG $0x4954f4c5; BYTE $0xc0   // vandps    ymm1, ymm1, yword [rcx - 64]
	LONG $0x5154ecc5; BYTE $0xe0   // vandps    ymm2, ymm2, yword [rcx - 32]
	LONG $0x1954e4c5               // vandps    ymm3, ymm3, yword [rcx]
	LONG $0x547cc1c4; WORD $0xa040 // vandps    ymm0, ymm0, yword [r8 - 96]
	LONG $0x5474c1c4; WORD $0xc048 // vandps    ymm1, ymm1, yword [r8 - 64]
	LONG $0x546cc1c4; WORD $0xe050 // vandps    ymm2, ymm2, yword [r8 - 32]
	LONG $0x5464c1c4; BYTE $0x18   // vandps    ymm3, ymm3, yword [r8]
	LONG $0x4754fcc5; BYTE $0xa0   // vandps    ymm0, ymm0, yword [rdi - 96]
	LONG $0x4f54f4c5; BYTE $0xc0   // vandps    ymm1, ymm1, yword [rdi - 64]
	LONG $0x5754ecc5; BYTE $0xe0   // vandps    ymm2, ymm2, yword [rdi - 32]
	LONG $0x1f54e4c5               // vandps    ymm3, ymm3, yword [rdi]
	LONG $0x4711fcc5; BYTE $0xa0   // vmovups    yword [rdi - 96], ymm0
	LONG $0x4f11fcc5; BYTE $0xc0   // vmovups    yword [rdi - 64], ymm1
	LONG $0x5711fcc5; BYTE $0xe0   // vmovups    yword [rdi - 32], ymm2
	LONG $0x1f11fcc5               // vmovups    yword [rdi], ymm3
	LONG $0x80ea8348               // sub    rdx, -128
	LONG $0x80e98348               // sub    rcx, -128
	LONG $0x80e88349               // sub    r8, -128
	LONG $0x80ee8348               // sub    rsi, -128
	LONG $0x80ef8348               // sub    rdi, -128
	LONG $0xf0c58349               // add    r13, -16
	JNE  LBB6_9
	WORD $0x394d; BYTE $0xe7       // cmp    r15, r12
	JNE  LBB6_11
	JMP  LBB6_16

LBB6_2:
	WORD $0x8949; BYTE $0xfe // mov    r14, rdi
	WORD $0x8949; BYTE $0xf2 // mov    r10, rsi
	WORD $0x894d; BYTE $0xc3 // mov    r11, r8
	WORD $0x8948; BYTE $0xc8 // mov    rax, rcx
	WORD $0x8948; BYTE $0xd3 // mov    rbx, rdx

LBB6_11:
	LONG $0x084e8d49             // lea    rcx, [r14 + 8]
	WORD $0x3949; BYTE $0xc9     // cmp    r9, rcx
	WORD $0x8948; BYTE $0xca     // mov    rdx, rcx
	LONG $0xd1470f49             // cmova    rdx, r9
	WORD $0x894c; BYTE $0xf6     // mov    rsi, r14
	WORD $0xf748; BYTE $0xd6     // not    rsi
	WORD $0x0148; BYTE $0xd6     // add    rsi, rdx
	WORD $0x8948; BYTE $0xf2     // mov    rdx, rsi
	LONG $0x03eac148             // shr    rdx, 3
	LONG $0xe6ba0f48; BYTE $0x03 // bt    rsi, 3
	JB   LBB6_12
	WORD $0x8b48; BYTE $0x33     // mov    rsi, qword [rbx]
	LONG $0x08c38348             // add    rbx, 8
	WORD $0x2349; BYTE $0x32     // and    rsi, qword [r10]
	LONG $0x08c28349             // add    r10, 8
	WORD $0x2348; BYTE $0x30     // and    rsi, qword [rax]
	LONG $0x08c08348             // add    rax, 8
	WORD $0x2349; BYTE $0x33     // and    rsi, qword [r11]
	LONG $0x08c38349             // add    r11, 8
	WORD $0x2149; BYTE $0x36     // and    qword [r14], rsi
	JMP  LBB6_14

LBB6_12:
	WORD $0x894c; BYTE $0xf1 // mov    rcx, r14

LBB6_14:
	WORD $0x8548; BYTE $0xd2 // test    rdx, rdx
	JE   LBB6_16

LBB6_15:
	WORD $0x8b48; BYTE $0x13 // mov    rdx, qword [rbx]
	WORD $0x2349; BYTE $0x12 // and    rdx, qword [r10]
	WORD $0x2348; BYTE $0x10 // and    rdx, qword [rax]
	WORD $0x2349; BYTE $0x13 // and    rdx, qword [r11]
	WORD $0x2148; BYTE $0x11 // and    qword [rcx], rdx
	LONG $0x08538b48         // mov    rdx, qword [rbx + 8]
	LONG $0x08522349         // and    rdx, qword [r10 + 8]
	LONG $0x08502348         // and    rdx, qword [rax + 8]
	LONG $0x08532349         // and    rdx, qword [r11 + 8]
	LONG $0x08512148         // and    qword [rcx + 8], rdx
	LONG $0x10c18348         // add    rcx, 16
	LONG $0x10c28349         // add    r10, 16
	LONG $0x10c38348         // add    rbx, 16
	LONG $0x10c08348         // add    rax, 16
	LONG $0x10c38349         // add    r11, 16
	WORD $0x394c; BYTE $0xc9 // cmp    rcx, r9
	JB   LBB6_15

LBB6_16:
	SUBQ $8, SP
	VZEROUPPER
	RET

TEXT ·_asm_or_avx(SB), $0-24

	MOVQ addr+0(FP), DI
	MOVQ addr1+8(FP), SI
	MOVQ len+16(FP), DX

	WORD $0x8548; BYTE $0xd2               // test    rdx, rdx
	JLE  LBB7_14
	LONG $0xd7048d4c                       // lea    r8, [rdi + 8*rdx]
	LONG $0x084f8d48                       // lea    rcx, [rdi + 8]
	WORD $0x3949; BYTE $0xc8               // cmp    r8, rcx
	WORD $0x8949; BYTE $0xca               // mov    r10, rcx
	LONG $0xd0470f4d                       // cmova    r10, r8
	WORD $0x8948; BYTE $0xf8               // mov    rax, rdi
	WORD $0xf748; BYTE $0xd0               // not    rax
	WORD $0x0149; BYTE $0xc2               // add    r10, rax
	LONG $0x03eac149                       // shr    r10, 3
	WORD $0xff49; BYTE $0xc2               // inc    r10
	LONG $0x10fa8349                       // cmp    r10, 16
	JB   LBB7_2
	QUAD $0xfffffffffff0b949; WORD $0x3fff // mov    r9, 4611686018427387888
	WORD $0x214d; BYTE $0xd1               // and    r9, r10
	JE   LBB7_2
	WORD $0x3949; BYTE $0xc8               // cmp    r8, rcx
	LONG $0xc8470f49                       // cmova    rcx, r8
	WORD $0x0148; BYTE $0xc1               // add    rcx, rax
	LONG $0xf8e18348                       // and    rcx, -8
	LONG $0x0e448d48; BYTE $0x08           // lea    rax, [rsi + rcx + 8]
	WORD $0x3948; BYTE $0xf8               // cmp    rax, rdi
	JBE  LBB7_6
	LONG $0x0f448d48; BYTE $0x08           // lea    rax, [rdi + rcx + 8]
	WORD $0x3948; BYTE $0xf0               // cmp    rax, rsi
	JBE  LBB7_6

LBB7_2:
	WORD $0x8948; BYTE $0xf9 // mov    rcx, rdi
	WORD $0x8948; BYTE $0xf2 // mov    rdx, rsi

LBB7_9:
	LONG $0x08718d48         // lea    rsi, [rcx + 8]
	WORD $0x3949; BYTE $0xf0 // cmp    r8, rsi
	LONG $0xf0470f49         // cmova    rsi, r8
	WORD $0x8948; BYTE $0xc8 // mov    rax, rcx
	WORD $0xf748; BYTE $0xd0 // not    rax
	WORD $0x0148; BYTE $0xf0 // add    rax, rsi
	WORD $0xc689             // mov    esi, eax
	WORD $0xeec1; BYTE $0x03 // shr    esi, 3
	WORD $0xc6ff             // inc    esi
	LONG $0x03e68348         // and    rsi, 3
	JE   LBB7_12
	WORD $0xf748; BYTE $0xde // neg    rsi

LBB7_11:
	WORD $0x8b48; BYTE $0x3a // mov    rdi, qword [rdx]
	LONG $0x08c28348         // add    rdx, 8
	WORD $0x0948; BYTE $0x39 // or    qword [rcx], rdi
	LONG $0x08c18348         // add    rcx, 8
	WORD $0xff48; BYTE $0xc6 // inc    rsi
	JNE  LBB7_11

LBB7_12:
	LONG $0x18f88348 // cmp    rax, 24
	JB   LBB7_14

LBB7_13:
	WORD $0x8b48; BYTE $0x02 // mov    rax, qword [rdx]
	WORD $0x0948; BYTE $0x01 // or    qword [rcx], rax
	LONG $0x08428b48         // mov    rax, qword [rdx + 8]
	LONG $0x08410948         // or    qword [rcx + 8], rax
	LONG $0x10428b48         // mov    rax, qword [rdx + 16]
	LONG $0x10410948         // or    qword [rcx + 16], rax
	LONG $0x18428b48         // mov    rax, qword [rdx + 24]
	LONG $0x18410948         // or    qword [rcx + 24], rax
	LONG $0x20c18348         // add    rcx, 32
	LONG $0x20c28348         // add    rdx, 32
	WORD $0x394c; BYTE $0xc1 // cmp    rcx, r8
	JB   LBB7_13

LBB7_14:
	VZEROUPPER
	RET

LBB7_6:
	LONG $0xcf0c8d4a         // lea    rcx, [rdi + 8*r9]
	LONG $0xce148d4a         // lea    rdx, [rsi + 8*r9]
	LONG $0x60c68348         // add    rsi, 96
	LONG $0x60c78348         // add    rdi, 96
	WORD $0x894c; BYTE $0xc8 // mov    rax, r9

LBB7_7:
	LONG $0x4710fcc5; BYTE $0xa0 // vmovups    ymm0, yword [rdi - 96]
	LONG $0x4f10fcc5; BYTE $0xc0 // vmovups    ymm1, yword [rdi - 64]
	LONG $0x5710fcc5; BYTE $0xe0 // vmovups    ymm2, yword [rdi - 32]
	LONG $0x1f10fcc5             // vmovups    ymm3, yword [rdi]
	LONG $0x4656fcc5; BYTE $0xa0 // vorps    ymm0, ymm0, yword [rsi - 96]
	LONG $0x4e56f4c5; BYTE $0xc0 // vorps    ymm1, ymm1, yword [rsi - 64]
	LONG $0x5656ecc5; BYTE $0xe0 // vorps    ymm2, ymm2, yword [rsi - 32]
	LONG $0x1e56e4c5             // vorps    ymm3, ymm3, yword [rsi]
	LONG $0x4711fcc5; BYTE $0xa0 // vmovups    yword [rdi - 96], ymm0
	LONG $0x4f11fcc5; BYTE $0xc0 // vmovups    yword [rdi - 64], ymm1
	LONG $0x5711fcc5; BYTE $0xe0 // vmovups    yword [rdi - 32], ymm2
	LONG $0x1f11fcc5             // vmovups    yword [rdi], ymm3
	LONG $0x80ee8348             // sub    rsi, -128
	LONG $0x80ef8348             // sub    rdi, -128
	LONG $0xf0c08348             // add    rax, -16
	JNE  LBB7_7
	WORD $0x394d; BYTE $0xca     // cmp    r10, r9
	JNE  LBB7_9
	JMP  LBB7_14

TEXT ·_asm_or2_avx(SB), $0-32

	MOVQ addr+0(FP), DI
	MOVQ addr1+8(FP), SI
	MOVQ addr2+16(FP), DX
	MOVQ len+24(FP), CX

	WORD $0x8548; BYTE $0xc9               // test    rcx, rcx
	JLE  LBB8_14
	LONG $0xcf048d4c                       // lea    r8, [rdi + 8*rcx]
	LONG $0x08478d48                       // lea    rax, [rdi + 8]
	WORD $0x3949; BYTE $0xc0               // cmp    r8, rax
	WORD $0x8949; BYTE $0xc2               // mov    r10, rax
	LONG $0xd0470f4d                       // cmova    r10, r8
	WORD $0x8948; BYTE $0xf9               // mov    rcx, rdi
	WORD $0xf748; BYTE $0xd1               // not    rcx
	WORD $0x0149; BYTE $0xca               // add    r10, rcx
	LONG $0x03eac149                       // shr    r10, 3
	WORD $0xff49; BYTE $0xc2               // inc    r10
	LONG $0x10fa8349                       // cmp    r10, 16
	JB   LBB8_2
	QUAD $0xfffffffffff0bb49; WORD $0x3fff // mov    r11, 4611686018427387888
	WORD $0x214d; BYTE $0xd3               // and    r11, r10
	JE   LBB8_2
	WORD $0x3949; BYTE $0xc0               // cmp    r8, rax
	LONG $0xc0470f49                       // cmova    rax, r8
	WORD $0x0148; BYTE $0xc8               // add    rax, rcx
	LONG $0xf8e08348                       // and    rax, -8
	LONG $0x074c8d48; BYTE $0x08           // lea    rcx, [rdi + rax + 8]
	LONG $0x065c8d48; BYTE $0x08           // lea    rbx, [rsi + rax + 8]
	LONG $0x024c8d4c; BYTE $0x08           // lea    r9, [rdx + rax + 8]
	WORD $0x3948; BYTE $0xdf               // cmp    rdi, rbx
	WORD $0xc018                           // sbb    al, al
	WORD $0x3948; BYTE $0xce               // cmp    rsi, rcx
	WORD $0xdb18                           // sbb    bl, bl
	WORD $0xc320                           // and    bl, al
	WORD $0x394c; BYTE $0xcf               // cmp    rdi, r9
	WORD $0xc018                           // sbb    al, al
	WORD $0x3948; BYTE $0xca               // cmp    rdx, rcx
	WORD $0xc918                           // sbb    cl, cl
	WORD $0xc3f6; BYTE $0x01               // test    bl, 1
	JNE  LBB8_2
	WORD $0xc820                           // and    al, cl
	WORD $0x0124                           // and    al, 1
	JNE  LBB8_2
	LONG $0xdf0c8d4a                       // lea    rcx, [rdi + 8*r11]
	LONG $0xde0c8d4e                       // lea    r9, [rsi + 8*r11]
	LONG $0xda048d4a                       // lea    rax, [rdx + 8*r11]
	LONG $0x60c28348                       // add    rdx, 96
	LONG $0x60c68348                       // add    rsi, 96
	LONG $0x60c78348                       // add    rdi, 96
	WORD $0x894c; BYTE $0xdb               // mov    rbx, r11

LBB8_7:
	LONG $0x4210fcc5; BYTE $0xa0 // vmovups    ymm0, yword [rdx - 96]
	LONG $0x4a10fcc5; BYTE $0xc0 // vmovups    ymm1, yword [rdx - 64]
	LONG $0x5210fcc5; BYTE $0xe0 // vmovups    ymm2, yword [rdx - 32]
	LONG $0x1a10fcc5             // vmovups    ymm3, yword [rdx]
	LONG $0x4656fcc5; BYTE $0xa0 // vorps    ymm0, ymm0, yword [rsi - 96]
	LONG $0x4e56f4c5; BYTE $0xc0 // vorps    ymm1, ymm1, yword [rsi - 64]
	LONG $0x5656ecc5; BYTE $0xe0 // vorps    ymm2, ymm2, yword [rsi - 32]
	LONG $0x1e56e4c5             // vorps    ymm3, ymm3, yword [rsi]
	LONG $0x4756fcc5; BYTE $0xa0 // vorps    ymm0, ymm0, yword [rdi - 96]
	LONG $0x4f56f4c5; BYTE $0xc0 // vorps    ymm1, ymm1, yword [rdi - 64]
	LONG $0x5756ecc5; BYTE $0xe0 // vorps    ymm2, ymm2, yword [rdi - 32]
	LONG $0x1f56e4c5             // vorps    ymm3, ymm3, yword [rdi]
	LONG $0x4711fcc5; BYTE $0xa0 // vmovups    yword [rdi - 96], ymm0
	LONG $0x4f11fcc5; BYTE $0xc0 // vmovups    yword [rdi - 64], ymm1
	LONG $0x5711fcc5; BYTE $0xe0 // vmovups    yword [rdi - 32], ymm2
	LONG $0x1f11fcc5             // vmovups    yword [rdi], ymm3
	LONG $0x80ea8348             // sub    rdx, -128
	LONG $0x80ee8348             // sub    rsi, -128
	LONG $0x80ef8348             // sub    rdi, -128
	LONG $0xf0c38348             // add    rbx, -16
	JNE  LBB8_7
	WORD $0x394d; BYTE $0xda     // cmp    r10, r11
	JNE  LBB8_9
	JMP  LBB8_14

LBB8_2:
	WORD $0x8948; BYTE $0xf9 // mov    rcx, rdi
	WORD $0x8949; BYTE $0xf1 // mov    r9, rsi
	WORD $0x8948; BYTE $0xd0 // mov    rax, rdx

LBB8_9:
	LONG $0x08718d48         // lea    rsi, [rcx + 8]
	WORD $0x3949; BYTE $0xf0 // cmp    r8, rsi
	LONG $0xf0470f49         // cmova    rsi, r8
	WORD $0x8948; BYTE $0xca // mov    rdx, rcx
	WORD $0xf748; BYTE $0xd2 // not    rdx
	WORD $0x0148; BYTE $0xf2 // add    rdx, rsi
	WORD $0xd689             // mov    esi, edx
	WORD $0xeec1; BYTE $0x03 // shr    esi, 3
	WORD $0xc6ff             // inc    esi
	LONG $0x03e68348         // and    rsi, 3
	JE   LBB8_12
	WORD $0xf748; BYTE $0xde // neg    rsi

LBB8_11:
	WORD $0x8b48; BYTE $0x38 // mov    rdi, qword [rax]
	LONG $0x08c08348         // add    rax, 8
	WORD $0x0b49; BYTE $0x39 // or    rdi, qword [r9]
	LONG $0x08c18349         // add    r9, 8
	WORD $0x0948; BYTE $0x39 // or    qword [rcx], rdi
	LONG $0x08c18348         // add    rcx, 8
	WORD $0xff48; BYTE $0xc6 // inc    rsi
	JNE  LBB8_11

LBB8_12:
	LONG $0x18fa8348 // cmp    rdx, 24
	JB   LBB8_14

LBB8_13:
	WORD $0x8b48; BYTE $0x10 // mov    rdx, qword [rax]
	WORD $0x0b49; BYTE $0x11 // or    rdx, qword [r9]
	WORD $0x0948; BYTE $0x11 // or    qword [rcx], rdx
	LONG $0x08508b48         // mov    rdx, qword [rax + 8]
	LONG $0x08510b49         // or    rdx, qword [r9 + 8]
	LONG $0x08510948         // or    qword [rcx + 8], rdx
	LONG $0x10508b48         // mov    rdx, qword [rax + 16]
	LONG $0x10510b49         // or    rdx, qword [r9 + 16]
	LONG $0x10510948         // or    qword [rcx + 16], rdx
	LONG $0x18508b48         // mov    rdx, qword [rax + 24]
	LONG $0x18510b49         // or    rdx, qword [r9 + 24]
	LONG $0x18510948         // or    qword [rcx + 24], rdx
	LONG $0x20c18348         // add    rcx, 32
	LONG $0x20c18349         // add    r9, 32
	LONG $0x20c08348         // add    rax, 32
	WORD $0x394c; BYTE $0xc1 // cmp    rcx, r8
	JB   LBB8_13

LBB8_14:
	VZEROUPPER
	RET

TEXT ·_asm_or4_avx(SB), $32-48

	MOVQ addr+0(FP), DI
	MOVQ addr1+8(FP), SI
	MOVQ addr2+16(FP), DX
	MOVQ addr3+24(FP), CX
	MOVQ addr4+32(FP), R8
	MOVQ len+40(FP), R9
	ADDQ $8, SP

	WORD $0x854d; BYTE $0xc9               // test    r9, r9
	JLE  LBB9_16
	LONG $0xcf0c8d4e                       // lea    r9, [rdi + 8*r9]
	LONG $0x08478d48                       // lea    rax, [rdi + 8]
	WORD $0x3949; BYTE $0xc1               // cmp    r9, rax
	WORD $0x8949; BYTE $0xc7               // mov    r15, rax
	LONG $0xf9470f4d                       // cmova    r15, r9
	WORD $0x8948; BYTE $0xfb               // mov    rbx, rdi
	WORD $0xf748; BYTE $0xd3               // not    rbx
	WORD $0x0149; BYTE $0xdf               // add    r15, rbx
	LONG $0x03efc149                       // shr    r15, 3
	WORD $0xff49; BYTE $0xc7               // inc    r15
	LONG $0x10ff8349                       // cmp    r15, 16
	JB   LBB9_2
	QUAD $0xfffffffffff0ba49; WORD $0x3fff // mov    r10, 4611686018427387888
	WORD $0x214d; BYTE $0xfa               // and    r10, r15
	JE   LBB9_2
	LONG $0x2454894c; BYTE $0x08           // mov    qword [rsp + 8], r10
	WORD $0x3949; BYTE $0xc1               // cmp    r9, rax
	LONG $0xc1470f49                       // cmova    rax, r9
	WORD $0x0148; BYTE $0xd8               // add    rax, rbx
	LONG $0xf8e08348                       // and    rax, -8
	LONG $0x07648d4c; BYTE $0x08           // lea    r12, [rdi + rax + 8]
	LONG $0x06548d4c; BYTE $0x08           // lea    r10, [rsi + rax + 8]
	LONG $0x025c8d4c; BYTE $0x08           // lea    r11, [rdx + rax + 8]
	LONG $0x01748d4c; BYTE $0x08           // lea    r14, [rcx + rax + 8]
	LONG $0x00448d49; BYTE $0x08           // lea    rax, [r8 + rax + 8]
	LONG $0x24448948; BYTE $0x10           // mov    qword [rsp + 16], rax
	WORD $0x394c; BYTE $0xd7               // cmp    rdi, r10
	WORD $0xc018                           // sbb    al, al
	WORD $0x394c; BYTE $0xe6               // cmp    rsi, r12
	WORD $0x1845; BYTE $0xed               // sbb    r13b, r13b
	WORD $0x2041; BYTE $0xc5               // and    r13b, al
	WORD $0x394c; BYTE $0xdf               // cmp    rdi, r11
	WORD $0xc018                           // sbb    al, al
	WORD $0x394c; BYTE $0xe2               // cmp    rdx, r12
	WORD $0xdb18                           // sbb    bl, bl
	LONG $0x07245c88                       // mov    byte [rsp + 7], bl
	WORD $0x394c; BYTE $0xf7               // cmp    rdi, r14
	WORD $0x1845; BYTE $0xdb               // sbb    r11b, r11b
	WORD $0x394c; BYTE $0xe1               // cmp    rcx, r12
	WORD $0x1845; BYTE $0xf6               // sbb    r14b, r14b
	LONG $0x247c3b48; BYTE $0x10           // cmp    rdi, qword [rsp + 16]
	WORD $0x1845; BYTE $0xd2               // sbb    r10b, r10b
	WORD $0x394d; BYTE $0xe0               // cmp    r8, r12
	WORD $0xdb18                           // sbb    bl, bl
	LONG $0x01c5f641                       // test    r13b, 1
	JNE  LBB9_2
	LONG $0x07244422                       // and    al, byte [rsp + 7]
	WORD $0x0124                           // and    al, 1
	JNE  LBB9_2
	WORD $0x2045; BYTE $0xf3               // and    r11b, r14b
	LONG $0x01e38041                       // and    r11b, 1
	JNE  LBB9_2
	WORD $0x2041; BYTE $0xda               // and    r10b, bl
	LONG $0x01e28041                       // and    r10b, 1
	JNE  LBB9_2
	LONG $0x24648b4c; BYTE $0x08           // mov    r12, qword [rsp + 8]
	LONG $0xe7348d4e                       // lea    r14, [rdi + 8*r12]
	LONG $0xe6148d4e                       // lea    r10, [rsi + 8*r12]
	LONG $0xe01c8d4f                       // lea    r11, [r8 + 8*r12]
	LONG $0xe1048d4a                       // lea    rax, [rcx + 8*r12]
	LONG $0xe21c8d4a                       // lea    rbx, [rdx + 8*r12]
	LONG $0x60c28348                       // add    rdx, 96
	LONG $0x60c18348                       // add    rcx, 96
	LONG $0x60c08349                       // add    r8, 96
	LONG $0x60c68348                       // add    rsi, 96
	LONG $0x60c78348                       // add    rdi, 96
	WORD $0x894d; BYTE $0xe5               // mov    r13, r12

LBB9_9:
	LONG $0x4210fcc5; BYTE $0xa0   // vmovups    ymm0, yword [rdx - 96]
	LONG $0x4a10fcc5; BYTE $0xc0   // vmovups    ymm1, yword [rdx - 64]
	LONG $0x5210fcc5; BYTE $0xe0   // vmovups    ymm2, yword [rdx - 32]
	LONG $0x1a10fcc5               // vmovups    ymm3, yword [rdx]
	LONG $0x4656fcc5; BYTE $0xa0   // vorps    ymm0, ymm0, yword [rsi - 96]
	LONG $0x4e56f4c5; BYTE $0xc0   // vorps    ymm1, ymm1, yword [rsi - 64]
	LONG $0x5656ecc5; BYTE $0xe0   // vorps    ymm2, ymm2, yword [rsi - 32]
	LONG $0x1e56e4c5               // vorps    ymm3, ymm3, yword [rsi]
	LONG $0x4156fcc5; BYTE $0xa0   // vorps    ymm0, ymm0, yword [rcx - 96]
	LONG $0x4956f4c5; BYTE $0xc0   // vorps    ymm1, ymm1, yword [rcx - 64]
	LONG $0x5156ecc5; BYTE $0xe0   // vorps    ymm2, ymm2, yword [rcx - 32]
	LONG $0x1956e4c5               // vorps    ymm3, ymm3, yword [rcx]
	LONG $0x567cc1c4; WORD $0xa040 // vorps    ymm0, ymm0, yword [r8 - 96]
	LONG $0x5674c1c4; WORD $0xc048 // vorps    ymm1, ymm1, yword [r8 - 64]
	LONG $0x566cc1c4; WORD $0xe050 // vorps    ymm2, ymm2, yword [r8 - 32]
	LONG $0x5664c1c4; BYTE $0x18   // vorps    ymm3, ymm3, yword [r8]
	LONG $0x4756fcc5; BYTE $0xa0   // vorps    ymm0, ymm0, yword [rdi - 96]
	LONG $0x4f56f4c5; BYTE $0xc0   // vorps    ymm1, ymm1, yword [rdi - 64]
	LONG $0x5756ecc5; BYTE $0xe0   // vorps    ymm2, ymm2, yword [rdi - 32]
	LONG $0x1f56e4c5               // vorps    ymm3, ymm3, yword [rdi]
	LONG $0x4711fcc5; BYTE $0xa0   // vmovups    yword [rdi - 96], ymm0
	LONG $0x4f11fcc5; BYTE $0xc0   // vmovups    yword [rdi - 64], ymm1
	LONG $0x5711fcc5; BYTE $0xe0   // vmovups    yword [rdi - 32], ymm2
	LONG $0x1f11fcc5               // vmovups    yword [rdi], ymm3
	LONG $0x80ea8348               // sub    rdx, -128
	LONG $0x80e98348               // sub    rcx, -128
	LONG $0x80e88349               // sub    r8, -128
	LONG $0x80ee8348               // sub    rsi, -128
	LONG $0x80ef8348               // sub    rdi, -128
	LONG $0xf0c58349               // add    r13, -16
	JNE  LBB9_9
	WORD $0x394d; BYTE $0xe7       // cmp    r15, r12
	JNE  LBB9_11
	JMP  LBB9_16

LBB9_2:
	WORD $0x8949; BYTE $0xfe // mov    r14, rdi
	WORD $0x8949; BYTE $0xf2 // mov    r10, rsi
	WORD $0x894d; BYTE $0xc3 // mov    r11, r8
	WORD $0x8948; BYTE $0xc8 // mov    rax, rcx
	WORD $0x8948; BYTE $0xd3 // mov    rbx, rdx

LBB9_11:
	LONG $0x084e8d49             // lea    rcx, [r14 + 8]
	WORD $0x3949; BYTE $0xc9     // cmp    r9, rcx
	WORD $0x8948; BYTE $0xca     // mov    rdx, rcx
	LONG $0xd1470f49             // cmova    rdx, r9
	WORD $0x894c; BYTE $0xf6     // mov    rsi, r14
	WORD $0xf748; BYTE $0xd6     // not    rsi
	WORD $0x0148; BYTE $0xd6     // add    rsi, rdx
	WORD $0x8948; BYTE $0xf2     // mov    rdx, rsi
	LONG $0x03eac148             // shr    rdx, 3
	LONG $0xe6ba0f48; BYTE $0x03 // bt    rsi, 3
	JB   LBB9_12
	WORD $0x8b48; BYTE $0x33     // mov    rsi, qword [rbx]
	LONG $0x08c38348             // add    rbx, 8
	WORD $0x0b49; BYTE $0x32     // or    rsi, qword [r10]
	LONG $0x08c28349             // add    r10, 8
	WORD $0x0b48; BYTE $0x30     // or    rsi, qword [rax]
	LONG $0x08c08348             // add    rax, 8
	WORD $0x0b49; BYTE $0x33     // or    rsi, qword [r11]
	LONG $0x08c38349             // add    r11, 8
	WORD $0x0949; BYTE $0x36     // or    qword [r14], rsi
	JMP  LBB9_14

LBB9_12:
	WORD $0x894c; BYTE $0xf1 // mov    rcx, r14

LBB9_14:
	WORD $0x8548; BYTE $0xd2 // test    rdx, rdx
	JE   LBB9_16

LBB9_15:
	WORD $0x8b48; BYTE $0x13 // mov    rdx, qword [rbx]
	WORD $0x0b49; BYTE $0x12 // or    rdx, qword [r10]
	WORD $0x0b48; BYTE $0x10 // or    rdx, qword [rax]
	WORD $0x0b49; BYTE $0x13 // or    rdx, qword [r11]
	WORD $0x0948; BYTE $0x11 // or    qword [rcx], rdx
	LONG $0x08538b48         // mov    rdx, qword [rbx + 8]
	LONG $0x08520b49         // or    rdx, qword [r10 + 8]
	LONG $0x08500b48         // or    rdx, qword [rax + 8]
	LONG $0x08530b49         // or    rdx, qword [r11 + 8]
	LONG $0x08510948         // or    qword [rcx + 8], rdx
	LONG $0x10c18348         // add    rcx, 16
	LONG $0x10c28349         // add    r10, 16
	LONG $0x10c38348         // add    rbx, 16
	LONG $0x10c08348         // add    rax, 16
	LONG $0x10c38349         // add    r11, 16
	WORD $0x394c; BYTE $0xc9 // cmp    rcx, r9
	JB   LBB9_15

LBB9_16:
	SUBQ $8, SP
	VZEROUPPER
	RET

TEXT ·_asm_andn_avx(SB), $0-24

	MOVQ addr+0(FP), DI
	MOVQ addr1+8(FP), SI
	MOVQ len+16(FP), DX

	WORD $0x8548; BYTE $0xd2               // test    rdx, rdx
	JLE  LBB10_14
	LONG $0xd7048d4c                       // lea    r8, [rdi + 8*rdx]
	LONG $0x084f8d48                       // lea    rcx, [rdi + 8]
	WORD $0x3949; BYTE $0xc8               // cmp    r8, rcx
	WORD $0x8949; BYTE $0xca               // mov    r10, rcx
	LONG $0xd0470f4d                       // cmova    r10, r8
	WORD $0x8948; BYTE $0xf8               // mov    rax, rdi
	WORD $0xf748; BYTE $0xd0               // not    rax
	WORD $0x0149; BYTE $0xc2               // add    r10, rax
	LONG $0x03eac149                       // shr    r10, 3
	WORD $0xff49; BYTE $0xc2               // inc    r10
	LONG $0x10fa8349                       // cmp    r10, 16
	JB   LBB10_2
	QUAD $0xfffffffffff0b949; WORD $0x3fff // mov    r9, 4611686018427387888
	WORD $0x214d; BYTE $0xd1               // and    r9, r10
	JE   LBB10_2
	WORD $0x3949; BYTE $0xc8               // cmp    r8, rcx
	LONG $0xc8470f49                       // cmova    rcx, r8
	WORD $0x0148; BYTE $0xc1               // add    rcx, rax
	LONG $0xf8e18348                       // and    rcx, -8
	LONG $0x0e448d48; BYTE $0x08           // lea    rax, [rsi + rcx + 8]
	WORD $0x3948; BYTE $0xf8               // cmp    rax, rdi
	JBE  LBB10_6
	LONG $0x0f448d48; BYTE $0x08           // lea    rax, [rdi + rcx + 8]
	WORD $0x3948; BYTE $0xf0               // cmp    rax, rsi
	JBE  LBB10_6

LBB10_2:
	WORD $0x8948; BYTE $0xf9 // mov    rcx, rdi
	WORD $0x8948; BYTE $0xf2 // mov    rdx, rsi

LBB10_9:
	LONG $0x08718d48         // lea    rsi, [rcx + 8]
	WORD $0x3949; BYTE $0xf0 // cmp    r8, rsi
	LONG $0xf0470f49         // cmova    rsi, r8
	WORD $0x8948; BYTE $0xc8 // mov    rax, rcx
	WORD $0xf748; BYTE $0xd0 // not    rax
	WORD $0x0148; BYTE $0xf0 // add    rax, rsi
	WORD $0xc689             // mov    esi, eax
	WORD $0xeec1; BYTE $0x03 // shr    esi, 3
	WORD $0xc6ff             // inc    esi
	LONG $0x03e68348         // and    rsi, 3
	JE   LBB10_12
	WORD $0xf748; BYTE $0xde // neg    rsi

LBB10_11:
	WORD $0x8b48; BYTE $0x3a // mov    rdi, qword [rdx]
	LONG $0x08c28348         // add    rdx, 8
	WORD $0xf748; BYTE $0xd7 // not    rdi
	WORD $0x2148; BYTE $0x39 // and    qword [rcx], rdi
	LONG $0x08c18348         // add    rcx, 8
	WORD $0xff48; BYTE $0xc6 // inc    rsi
	JNE  LBB10_11

LBB10_12:
	LONG $0x18f88348 // cmp    rax, 24
	JB   LBB10_14

LBB10_13:
	WORD $0x8b48; BYTE $0x02 // mov    rax, qword [rdx]
	WORD $0xf748; BYTE $0xd0 // not    rax
	WORD $0x2148; BYTE $0x01 // and    qword [rcx], rax
	LONG $0x08428b48         // mov    rax, qword [rdx + 8]
	WORD $0xf748; BYTE $0xd0 // not    rax
	LONG $0x08412148         // and    qword [rcx + 8], rax
	LONG $0x10428b48         // mov    rax, qword [rdx + 16]
	WORD $0xf748; BYTE $0xd0 // not    rax
	LONG $0x10412148         // and    qword [rcx + 16], rax
	LONG $0x18428b48         // mov    rax, qword [rdx + 24]
	WORD $0xf748; BYTE $0xd0 // not    rax
	LONG $0x18412148         // and    qword [rcx + 24], rax
	LONG $0x20c18348         // add    rcx, 32
	LONG $0x20c28348         // add    rdx, 32
	WORD $0x394c; BYTE $0xc1 // cmp    rcx, r8
	JB   LBB10_13

LBB10_14:
	VZEROUPPER
	RET

LBB10_6:
	LONG $0xcf0c8d4a         // lea    rcx, [rdi + 8*r9]
	LONG $0xce148d4a         // lea    rdx, [rsi + 8*r9]
	LONG $0x60c68348         // add    rsi, 96
	LONG $0x60c78348         // add    rdi, 96
	WORD $0x894c; BYTE $0xc8 // mov    rax, r9

LBB10_7:
	LONG $0x4610fcc5; BYTE $0xa0 // vmovups    ymm0, yword [rsi - 96]
	LONG $0x4e10fcc5; BYTE $0xc0 // vmovups    ymm1, yword [rsi - 64]
	LONG $0x5610fcc5; BYTE $0xe0 // vmovups    ymm2, yword [rsi - 32]
	LONG $0x1e10fcc5             // vmovups    ymm3, yword [rsi]
	LONG $0x4755fcc5; BYTE $0xa0 // vandnps    ymm0, ymm0, yword [rdi - 96]
	LONG $0x4f55f4c5; BYTE $0xc0 // vandnps    ymm1, ymm1, yword [rdi - 64]
	LONG $0x5755ecc5; BYTE $0xe0 // vandnps    ymm2, ymm2, yword [rdi - 32]
	LONG $0x1f55e4c5             // vandnps    ymm3, ymm3, yword [rdi]
	LONG $0x4711fcc5; BYTE $0xa0 // vmovups    yword [rdi - 96], ymm0
	LONG $0x4f11fcc5; BYTE $0xc0 // vmovups    yword [rdi - 64], ymm1
	LONG $0x5711fcc5; BYTE $0xe0 // vmovups    yword [rdi - 32], ymm2
	LONG $0x1f11fcc5             // vmovups    yword [rdi], ymm3
	LONG $0x80ee8348             // sub    rsi, -128
	LONG $0x80ef8348             // sub    rdi, -128
	LONG $0xf0c08348             // add    rax, -16
	JNE  LBB10_7
	WORD $0x394d; BYTE $0xca     // cmp    r10, r9
	JNE  LBB10_9
	JMP  LBB10_14

TEXT ·_asm_memcopy_avx(SB), $0-24

	MOVQ addr+0(FP), DI
	MOVQ addr1+8(FP), SI
	MOVQ len+16(FP), DX

	WORD $0x8548; BYTE $0xd2                   // test    rdx, rdx
	JLE  LBB11_14
	WORD $0x0148; BYTE $0xfa                   // add    rdx, rdi
	LONG $0x01478d48                           // lea    rax, [rdi + 1]
	WORD $0x3948; BYTE $0xc2                   // cmp    rdx, rax
	WORD $0x8949; BYTE $0xc1                   // mov    r9, rax
	LONG $0xca470f4c                           // cmova    r9, rdx
	WORD $0x2949; BYTE $0xf9                   // sub    r9, rdi
	LONG $0x80f98149; WORD $0x0000; BYTE $0x00 // cmp    r9, 128
	JB   LBB11_13
	WORD $0x894d; BYTE $0xc8                   // mov    r8, r9
	LONG $0x80e08349                           // and    r8, -128
	JE   LBB11_13
	WORD $0x3948; BYTE $0xc2                   // cmp    rdx, rax
	LONG $0xc2470f48                           // cmova    rax, rdx
	WORD $0x8948; BYTE $0xc1                   // mov    rcx, rax
	WORD $0x2948; BYTE $0xf9                   // sub    rcx, rdi
	WORD $0x0148; BYTE $0xf1                   // add    rcx, rsi
	WORD $0x3948; BYTE $0xf9                   // cmp    rcx, rdi
	JBE  LBB11_5
	WORD $0x3948; BYTE $0xf0                   // cmp    rax, rsi
	JA   LBB11_13

LBB11_5:
	LONG $0x80488d49             // lea    rcx, [r8 - 128]
	WORD $0x8948; BYTE $0xc8     // mov    rax, rcx
	LONG $0x07e8c148             // shr    rax, 7
	LONG $0xe1ba0f48; BYTE $0x07 // bt    rcx, 7
	JB   LBB11_6
	LONG $0x0610fcc5             // vmovups    ymm0, yword [rsi]
	LONG $0x4e10fcc5; BYTE $0x20 // vmovups    ymm1, yword [rsi + 32]
	LONG $0x5610fcc5; BYTE $0x40 // vmovups    ymm2, yword [rsi + 64]
	LONG $0x5e10fcc5; BYTE $0x60 // vmovups    ymm3, yword [rsi + 96]
	LONG $0x0711fcc5             // vmovups    yword [rdi], ymm0
	LONG $0x4f11fcc5; BYTE $0x20 // vmovups    yword [rdi + 32], ymm1
	LONG $0x5711fcc5; BYTE $0x40 // vmovups    yword [rdi + 64], ymm2
	LONG $0x5f11fcc5; BYTE $0x60 // vmovups    yword [rdi + 96], ymm3
	LONG $0x000080b9; BYTE $0x00 // mov    ecx, 128
	JMP  LBB11_8

LBB11_6:
	WORD $0xc931 // xor    ecx, ecx

LBB11_8:
	WORD $0x8548; BYTE $0xc0 // test    rax, rax
	JE   LBB11_11
	WORD $0x894d; BYTE $0xc2 // mov    r10, r8
	WORD $0x2949; BYTE $0xca // sub    r10, rcx
	QUAD $0x000000e00e848d48 // lea    rax, [rsi + rcx + 224]
	QUAD $0x000000e00f8c8d48 // lea    rcx, [rdi + rcx + 224]

LBB11_10:
	QUAD $0xffffff208010fcc5                   // vmovups    ymm0, yword [rax - 224]
	QUAD $0xffffff408810fcc5                   // vmovups    ymm1, yword [rax - 192]
	QUAD $0xffffff609010fcc5                   // vmovups    ymm2, yword [rax - 160]
	LONG $0x5810fcc5; BYTE $0x80               // vmovups    ymm3, yword [rax - 128]
	QUAD $0xffffff208111fcc5                   // vmovups    yword [rcx - 224], ymm0
	QUAD $0xffffff408911fcc5                   // vmovups    yword [rcx - 192], ymm1
	QUAD $0xffffff609111fcc5                   // vmovups    yword [rcx - 160], ymm2
	LONG $0x5911fcc5; BYTE $0x80               // vmovups    yword [rcx - 128], ymm3
	LONG $0x4010fcc5; BYTE $0xa0               // vmovups    ymm0, yword [rax - 96]
	LONG $0x4810fcc5; BYTE $0xc0               // vmovups    ymm1, yword [rax - 64]
	LONG $0x5010fcc5; BYTE $0xe0               // vmovups    ymm2, yword [rax - 32]
	LONG $0x1810fcc5                           // vmovups    ymm3, yword [rax]
	LONG $0x4111fcc5; BYTE $0xa0               // vmovups    yword [rcx - 96], ymm0
	LONG $0x4911fcc5; BYTE $0xc0               // vmovups    yword [rcx - 64], ymm1
	LONG $0x5111fcc5; BYTE $0xe0               // vmovups    yword [rcx - 32], ymm2
	LONG $0x1911fcc5                           // vmovups    yword [rcx], ymm3
	LONG $0x01000548; WORD $0x0000             // add    rax, 256
	LONG $0x00c18148; WORD $0x0001; BYTE $0x00 // add    rcx, 256
	LONG $0x00c28149; WORD $0xffff; BYTE $0xff // add    r10, -256
	JNE  LBB11_10

LBB11_11:
	WORD $0x394d; BYTE $0xc1 // cmp    r9, r8
	JE   LBB11_14
	WORD $0x014c; BYTE $0xc7 // add    rdi, r8
	WORD $0x014c; BYTE $0xc6 // add    rsi, r8

LBB11_13:
	WORD $0xb60f; BYTE $0x06 // movzx    eax, byte [rsi]
	WORD $0xff48; BYTE $0xc6 // inc    rsi
	WORD $0x0788             // mov    byte [rdi], al
	WORD $0xff48; BYTE $0xc7 // inc    rdi
	WORD $0x3948; BYTE $0xd7 // cmp    rdi, rdx
	JB   LBB11_13

LBB11_14:
	VZEROUPPER
	RET

TEXT ·_asm_memset_avx(SB), $0-24

	MOVQ addr+0(FP), DI
	MOVQ v+8(FP), SI
	MOVQ len+16(FP), DX

	WORD $0x8548; BYTE $0xd2                   // test    rdx, rdx
	JLE  LBB12_13
	WORD $0x0148; BYTE $0xfa                   // add    rdx, rdi
	LONG $0x015f8d4c                           // lea    r11, [rdi + 1]
	WORD $0x394c; BYTE $0xda                   // cmp    rdx, r11
	LONG $0xda470f4c                           // cmova    r11, rdx
	WORD $0x2949; BYTE $0xfb                   // sub    r11, rdi
	LONG $0x80fb8149; WORD $0x0000; BYTE $0x00 // cmp    r11, 128
	JB   LBB12_12
	WORD $0x894d; BYTE $0xd8                   // mov    r8, r11
	LONG $0x80e08349                           // and    r8, -128
	WORD $0x894d; BYTE $0xda                   // mov    r10, r11
	LONG $0x80e28349                           // and    r10, -128
	JE   LBB12_12
	LONG $0xc6b60f40                           // movzx    eax, sil
	LONG $0xc06ef9c5                           // vmovd    xmm0, eax
	LONG $0xc9eff1c5                           // vpxor    xmm1, xmm1, xmm1
	LONG $0x0079e2c4; BYTE $0xc1               // vpshufb    xmm0, xmm0, xmm1
	LONG $0x187de3c4; WORD $0x01c0             // vinsertf128    ymm0, ymm0, xmm0, 1
	LONG $0x804a8d4d                           // lea    r9, [r10 - 128]
	WORD $0x8944; BYTE $0xc8                   // mov    eax, r9d
	WORD $0xe8c1; BYTE $0x07                   // shr    eax, 7
	WORD $0xc0ff                               // inc    eax
	LONG $0x03e08348                           // and    rax, 3
	JE   LBB12_4
	WORD $0xf748; BYTE $0xd8                   // neg    rax
	WORD $0xc931                               // xor    ecx, ecx

LBB12_6:
	LONG $0x0411fcc5; BYTE $0x0f   // vmovups    yword [rdi + rcx], ymm0
	LONG $0x4411fcc5; WORD $0x200f // vmovups    yword [rdi + rcx + 32], ymm0
	LONG $0x4411fcc5; WORD $0x400f // vmovups    yword [rdi + rcx + 64], ymm0
	LONG $0x4411fcc5; WORD $0x600f // vmovups    yword [rdi + rcx + 96], ymm0
	LONG $0x80e98348               // sub    rcx, -128
	WORD $0xff48; BYTE $0xc0       // inc    rax
	JNE  LBB12_6
	JMP  LBB12_7

LBB12_4:
	WORD $0xc931 // xor    ecx, ecx

LBB12_7:
	LONG $0x80f98149; WORD $0x0001; BYTE $0x00 // cmp    r9, 384
	JB   LBB12_10
	WORD $0x894c; BYTE $0xd0                   // mov    rax, r10
	WORD $0x2948; BYTE $0xc8                   // sub    rax, rcx
	QUAD $0x000001e00f8c8d48                   // lea    rcx, [rdi + rcx + 480]

LBB12_9:
	QUAD $0xfffffe208111fcc5                   // vmovups    yword [rcx - 480], ymm0
	QUAD $0xfffffe408111fcc5                   // vmovups    yword [rcx - 448], ymm0
	QUAD $0xfffffe608111fcc5                   // vmovups    yword [rcx - 416], ymm0
	QUAD $0xfffffe808111fcc5                   // vmovups    yword [rcx - 384], ymm0
	QUAD $0xfffffea08111fcc5                   // vmovups    yword [rcx - 352], ymm0
	QUAD $0xfffffec08111fcc5                   // vmovups    yword [rcx - 320], ymm0
	QUAD $0xfffffee08111fcc5                   // vmovups    yword [rcx - 288], ymm0
	QUAD $0xffffff008111fcc5                   // vmovups    yword [rcx - 256], ymm0
	QUAD $0xffffff208111fcc5                   // vmovups    yword [rcx - 224], ymm0
	QUAD $0xffffff408111fcc5                   // vmovups    yword [rcx - 192], ymm0
	QUAD $0xffffff608111fcc5                   // vmovups    yword [rcx - 160], ymm0
	LONG $0x4111fcc5; BYTE $0x80               // vmovups    yword [rcx - 128], ymm0
	LONG $0x4111fcc5; BYTE $0xa0               // vmovups    yword [rcx - 96], ymm0
	LONG $0x4111fcc5; BYTE $0xc0               // vmovups    yword [rcx - 64], ymm0
	LONG $0x4111fcc5; BYTE $0xe0               // vmovups    yword [rcx - 32], ymm0
	LONG $0x0111fcc5                           // vmovups    yword [rcx], ymm0
	LONG $0x00c18148; WORD $0x0002; BYTE $0x00 // add    rcx, 512
	LONG $0xfe000548; WORD $0xffff             // add    rax, -512
	JNE  LBB12_9

LBB12_10:
	WORD $0x394d; BYTE $0xd3 // cmp    r11, r10
	JE   LBB12_13
	WORD $0x014c; BYTE $0xc7 // add    rdi, r8

LBB12_12:
	WORD $0x8840; BYTE $0x37 // mov    byte [rdi], sil
	WORD $0xff48; BYTE $0xc7 // inc    rdi
	WORD $0x3948; BYTE $0xd7 // cmp    rdi, rdx
	JB   LBB12_12

LBB12_13:
	VZEROUPPER
	RET

TEXT ·_asm_bitmap_get_bit_num_avx(SB), $0-24

	MOVQ addr+0(FP), DI
	MOVQ len+8(FP), SI

	WORD $0x8548; BYTE $0xf6 // test    rsi, rsi
	JLE  LBB13_1
	LONG $0xf70c8d48         // lea    rcx, [rdi + 8*rsi]
	LONG $0x08478d48         // lea    rax, [rdi + 8]
	WORD $0x3948; BYTE $0xc1 // cmp    rcx, rax
	LONG $0xc1470f48         // cmova    rax, rcx
	WORD $0x8949; BYTE $0xf8 // mov    r8, rdi
	WORD $0xf749; BYTE $0xd0 // not    r8
	WORD $0x0149; BYTE $0xc0 // add    r8, rax
	WORD $0x8944; BYTE $0xc6 // mov    esi, r8d
	WORD $0xeec1; BYTE $0x03 // shr    esi, 3
	WORD $0xc6ff             // inc    esi
	LONG $0x07e68348         // and    rsi, 7
	JE   LBB13_3
	WORD $0xf748; BYTE $0xde // neg    rsi
	WORD $0xc031             // xor    eax, eax

LBB13_5:
	LONG $0xb80f48f3; BYTE $0x17 // popcnt    rdx, qword [rdi]
	LONG $0x08c78348             // add    rdi, 8
	WORD $0x0148; BYTE $0xd0     // add    rax, rdx
	WORD $0xff48; BYTE $0xc6     // inc    rsi
	JNE  LBB13_5
	JMP  LBB13_6

LBB13_1:
	WORD $0xc031 // xor    eax, eax
	JMP  LBB13_8

LBB13_3:
	WORD $0xc031 // xor    eax, eax

LBB13_6:
	LONG $0x38f88349 // cmp    r8, 56
	JB   LBB13_8

LBB13_7:
	LONG $0xb80f48f3; BYTE $0x17   // popcnt    rdx, qword [rdi]
	WORD $0x0148; BYTE $0xc2       // add    rdx, rax
	LONG $0xb80f48f3; WORD $0x0847 // popcnt    rax, qword [rdi + 8]
	WORD $0x0148; BYTE $0xd0       // add    rax, rdx
	LONG $0xb80f48f3; WORD $0x1057 // popcnt    rdx, qword [rdi + 16]
	WORD $0x0148; BYTE $0xc2       // add    rdx, rax
	LONG $0xb80f48f3; WORD $0x1847 // popcnt    rax, qword [rdi + 24]
	WORD $0x0148; BYTE $0xd0       // add    rax, rdx
	LONG $0xb80f48f3; WORD $0x2057 // popcnt    rdx, qword [rdi + 32]
	WORD $0x0148; BYTE $0xc2       // add    rdx, rax
	LONG $0xb80f48f3; WORD $0x2847 // popcnt    rax, qword [rdi + 40]
	WORD $0x0148; BYTE $0xd0       // add    rax, rdx
	LONG $0xb80f48f3; WORD $0x3057 // popcnt    rdx, qword [rdi + 48]
	WORD $0x0148; BYTE $0xc2       // add    rdx, rax
	LONG $0xb80f48f3; WORD $0x3847 // popcnt    rax, qword [rdi + 56]
	WORD $0x0148; BYTE $0xd0       // add    rax, rdx
	LONG $0x40c78348               // add    rdi, 64
	WORD $0x3948; BYTE $0xcf       // cmp    rdi, rcx
	JB   LBB13_7

LBB13_8:
	MOVQ AX, ret+16(FP)
	RET

TEXT ·_asm_bkdr_hash_avx(SB), $0-32

	MOVQ addr+0(FP), DI
	MOVQ len+8(FP), SI
	MOVQ seed+16(FP), DX

	WORD $0x8548; BYTE $0xf6 // test    rsi, rsi
	JLE  LBB14_3
	WORD $0x0148; BYTE $0xfe // add    rsi, rdi

LBB14_2:
	LONG $0x6bc26948; WORD $0x1409; BYTE $0x00 // imul    rax, rdx, 1313131
	WORD $0xb60f; BYTE $0x17                   // movzx    edx, byte [rdi]
	WORD $0xff48; BYTE $0xc7                   // inc    rdi
	WORD $0x0148; BYTE $0xc2                   // add    rdx, rax
	WORD $0x3948; BYTE $0xf7                   // cmp    rdi, rsi
	JB   LBB14_2

LBB14_3:
	WORD $0x8948; BYTE $0xd0 // mov    rax, rdx
	MOVQ AX, ret+24(FP)
	RET

TEXT ·_asm_multi_and_sum_avx(SB), $0-40

	MOVQ addr+0(FP), DI
	MOVQ addr1+8(FP), SI
	MOVQ len+16(FP), DX
	MOVQ seed+24(FP), CX

	WORD $0x8548; BYTE $0xd2 // test    rdx, rdx
	JLE  LBB15_1
	WORD $0x0148; BYTE $0xfa // add    rdx, rdi
	WORD $0x3145; BYTE $0xc0 // xor    r8d, r8d

LBB15_3:
	WORD $0xb60f; BYTE $0x07 // movzx    eax, byte [rdi]
	WORD $0xff48; BYTE $0xc7 // inc    rdi
	LONG $0x06af0f48         // imul    rax, qword [rsi]
	LONG $0x08c68348         // add    rsi, 8
	WORD $0x0149; BYTE $0xc0 // add    r8, rax
	WORD $0x3948; BYTE $0xd7 // cmp    rdi, rdx
	JB   LBB15_3
	JMP  LBB15_4

LBB15_1:
	WORD $0x3145; BYTE $0xc0 // xor    r8d, r8d

LBB15_4:
	LONG $0x4eaf0f48; BYTE $0xf8 // imul    rcx, qword [rsi - 8]
	WORD $0x014c; BYTE $0xc1     // add    rcx, r8
	WORD $0x8948; BYTE $0xc8     // mov    rax, rcx
	MOVQ AX, ret+32(FP)
	RET

TEXT ·_asm_bitmap_get_bit_list_avx(SB), $24-32

	MOVQ addr+0(FP), DI
	MOVQ addr1+8(FP), SI
	MOVQ len+16(FP), DX
	ADDQ $8, SP

	QUAD $0x000000082444c748; BYTE $0x00 // mov    qword [rsp + 8], 0
	WORD $0x8548; BYTE $0xd2             // test    rdx, rdx
	JLE  LBB16_1
	LONG $0xd7048d4c                     // lea    r8, [rdi + 8*rdx]
	WORD $0x3145; BYTE $0xc9             // xor    r9d, r9d
	WORD $0xc031                         // xor    eax, eax

LBB16_3:
	WORD $0x8b48; BYTE $0x0f     // mov    rcx, qword [rdi]
	LONG $0x08c78348             // add    rdi, 8
	LONG $0x244c8948; BYTE $0x08 // mov    qword [rsp + 8], rcx
	WORD $0x8548; BYTE $0xc9     // test    rcx, rcx
	JE   LBB16_5

LBB16_4:
	LONG $0xbc0f48f3; WORD $0x244c; BYTE $0x08 // tzcnt    rcx, qword [rsp + 8]
	WORD $0x014c; BYTE $0xc9     // add    rcx, r9
	WORD $0x8948; BYTE $0x0e     // mov    qword [rsi], rcx
	LONG $0x08c68348             // add    rsi, 8
	LONG $0x244c8b48; BYTE $0x08 // mov    rcx, qword [rsp + 8]
	LONG $0xff518d48             // lea    rdx, [rcx - 1]
	WORD $0x2148; BYTE $0xca     // and    rdx, rcx
	LONG $0x24548948; BYTE $0x08 // mov    qword [rsp + 8], rdx
	WORD $0xff48; BYTE $0xc0     // inc    rax
	WORD $0x8548; BYTE $0xd2     // test    rdx, rdx
	JNE  LBB16_4

LBB16_5:
	LONG $0x40c18349         // add    r9, 64
	WORD $0x394c; BYTE $0xc7 // cmp    rdi, r8
	JB   LBB16_3
	JMP  LBB16_6

LBB16_1:
	WORD $0xc031 // xor    eax, eax

LBB16_6:
	SUBQ $8, SP
	MOVQ AX, ret+24(FP)
	RET
